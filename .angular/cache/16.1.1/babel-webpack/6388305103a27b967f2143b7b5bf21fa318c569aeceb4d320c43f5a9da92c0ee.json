{"ast":null,"code":"import { HttpErrorResponse, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let ErrorInterceptorService = /*#__PURE__*/(() => {\n  class ErrorInterceptorService {\n    constructor(router) {\n      this.router = router;\n    }\n    intercept(req, next) {\n      return next.handle(req).pipe(catchError(error => {\n        if (error.status === 401) {\n          this.handleAuthError();\n          return throwError('Unauthorized');\n        }\n        if (error instanceof HttpErrorResponse) {\n          const applicationError = error.headers.get('Application-Error');\n          if (applicationError) {\n            return throwError(applicationError);\n          }\n          const serverError = error.error;\n          let modalStateErrors = '';\n          if (serverError.errors && typeof serverError.errors === 'object') {\n            for (const key in serverError.errors) {\n              if (serverError.errors[key]) {\n                modalStateErrors += serverError.errors[key] + '\\n';\n              }\n            }\n          }\n          return throwError(modalStateErrors || serverError || 'Server Error');\n        }\n      }));\n    }\n    handleAuthError() {\n      const userDataAgent = localStorage.getItem('userDataAgent');\n      if (userDataAgent) {\n        localStorage.removeItem('userDataAgent');\n        localStorage.removeItem('project');\n      }\n      this.router.navigate(['/']);\n    }\n    static #_ = this.ɵfac = function ErrorInterceptorService_Factory(t) {\n      return new (t || ErrorInterceptorService)(i0.ɵɵinject(i1.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ErrorInterceptorService,\n      factory: ErrorInterceptorService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ErrorInterceptorService;\n})();\nexport const ErrorInterceptorProvider = {\n  provide: HTTP_INTERCEPTORS,\n  useClass: ErrorInterceptorService,\n  multi: true\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}