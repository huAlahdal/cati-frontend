{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { inject, InjectionToken, LOCALE_ID } from '@angular/core';\nexport var OWL_DATE_TIME_LOCALE = new InjectionToken('OWL_DATE_TIME_LOCALE', {\n  providedIn: 'root',\n  factory: OWL_DATE_TIME_LOCALE_FACTORY\n});\nexport function OWL_DATE_TIME_LOCALE_FACTORY() {\n  return inject(LOCALE_ID);\n}\nexport var OWL_DATE_TIME_LOCALE_PROVIDER = {\n  provide: OWL_DATE_TIME_LOCALE,\n  useExisting: LOCALE_ID\n};\nvar DateTimeAdapter = function () {\n  function DateTimeAdapter() {\n    this._localeChanges = new Subject();\n    this.millisecondsInDay = 86400000;\n    this.milliseondsInMinute = 60000;\n  }\n  Object.defineProperty(DateTimeAdapter.prototype, \"localeChanges\", {\n    get: function () {\n      return this._localeChanges;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  DateTimeAdapter.prototype.compare = function (first, second) {\n    if (!this.isValid(first) || !this.isValid(second)) {\n      throw Error('JSNativeDate: Cannot compare invalid dates.');\n    }\n    var dateFirst = this.clone(first);\n    var dateSecond = this.clone(second);\n    var diff = this.getTime(dateFirst) - this.getTime(dateSecond);\n    if (diff < 0) {\n      return -1;\n    } else if (diff > 0) {\n      return 1;\n    } else {\n      return diff;\n    }\n  };\n  DateTimeAdapter.prototype.compareYear = function (first, second) {\n    if (!this.isValid(first) || !this.isValid(second)) {\n      throw Error('JSNativeDate: Cannot compare invalid dates.');\n    }\n    var yearLeft = this.getYear(first);\n    var yearRight = this.getYear(second);\n    var diff = yearLeft - yearRight;\n    if (diff < 0) {\n      return -1;\n    } else if (diff > 0) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n  DateTimeAdapter.prototype.deserialize = function (value) {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  };\n  DateTimeAdapter.prototype.setLocale = function (locale) {\n    this.locale = locale;\n    this._localeChanges.next();\n  };\n  DateTimeAdapter.prototype.clampDate = function (date, min, max) {\n    if (min && this.compare(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compare(date, max) > 0) {\n      return max;\n    }\n    return date;\n  };\n  return DateTimeAdapter;\n}();\nexport { DateTimeAdapter };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}