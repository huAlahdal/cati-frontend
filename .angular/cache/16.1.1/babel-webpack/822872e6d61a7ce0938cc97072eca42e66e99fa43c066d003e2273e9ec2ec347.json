{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Pipe, EventEmitter, Component, Input, Output, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i1$1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i1 from '@angular/platform-browser';\n\n/**\r\n * Check and return true if an object is type of string\r\n * @param obj Analyse has to object the string type\r\n * @return result of analysis\r\n */\nfunction ToastComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵlistener(\"click\", function ToastComponent_div_1_Template_div_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.close($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ToastComponent_div_2_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 9);\n    i0.ɵɵpipe(1, \"safeHtml\");\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"innerHTML\", i0.ɵɵpipeBind1(1, 1, ctx_r5.toast.title), i0.ɵɵsanitizeHtml);\n  }\n}\nfunction ToastComponent_div_2_br_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"br\");\n  }\n}\nfunction ToastComponent_div_2_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 10);\n    i0.ɵɵpipe(1, \"safeHtml\");\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"innerHtml\", i0.ɵɵpipeBind1(1, 1, ctx_r7.toast.msg), i0.ɵɵsanitizeHtml);\n  }\n}\nfunction ToastComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵtemplate(1, ToastComponent_div_2_span_1_Template, 2, 3, \"span\", 6);\n    i0.ɵɵtemplate(2, ToastComponent_div_2_br_2_Template, 1, 0, \"br\", 7);\n    i0.ɵɵtemplate(3, ToastComponent_div_2_span_3_Template, 2, 3, \"span\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.toast.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.toast.title && ctx_r1.toast.msg);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.toast.msg);\n  }\n}\nfunction ToastComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵelement(1, \"div\", 12);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"width\", ctx_r2.progressPercent, \"%\");\n  }\n}\nconst _c0 = function (a0, a1) {\n  return [a0, a1];\n};\nfunction ToastaComponent_ngx_toast_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ngx-toast\", 2);\n    i0.ɵɵlistener(\"closeToast\", function ToastaComponent_ngx_toast_1_Template_ngx_toast_closeToast_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const toast_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.closeToast(toast_r1));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const toast_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"toast\", toast_r1);\n  }\n}\nconst _c1 = function (a0) {\n  return [a0];\n};\nfunction isString(obj) {\n  return typeof obj === 'string';\n}\n/**\r\n * Check and return true if an object is type of number\r\n * @param obj Analyse has to object the boolean type\r\n * @return result of analysis\r\n */\nfunction isNumber(obj) {\n  return typeof obj === 'number';\n}\n/**\r\n * Check and return true if an object is type of Function\r\n * @param obj Analyse has to object the function type\r\n * @return result of analysis\r\n */\nfunction isFunction(obj) {\n  return typeof obj === 'function';\n}\n\n/**\r\n * Options to configure a new Toast\r\n */\nlet ToastOptions = /*#__PURE__*/(() => {\n  class ToastOptions {}\n  ToastOptions.ɵfac = function ToastOptions_Factory(t) {\n    return new (t || ToastOptions)();\n  };\n  ToastOptions.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ToastOptions,\n    factory: ToastOptions.ɵfac\n  });\n  return ToastOptions;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * Structrure of a created Toast\r\n */\nlet ToastData = /*#__PURE__*/(() => {\n  class ToastData {}\n  ToastData.ɵfac = function ToastData_Factory(t) {\n    return new (t || ToastData)();\n  };\n  ToastData.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ToastData,\n    factory: ToastData.ɵfac\n  });\n  return ToastData;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * Default configuration for all toasts and toasta container\r\n */\nlet ToastaConfig = /*#__PURE__*/(() => {\n  class ToastaConfig {\n    constructor() {\n      // Maximum number of toasties to show at once\n      this.limit = 5;\n      // Whether to show the 'X' icon to close the toast\n      this.showClose = true;\n      // Whether to show a progress bar at the bottom of the notification\n      this.showDuration = true;\n      // The window position where the toast pops up\n      this.position = 'bottom-right';\n      // How long (in miliseconds) the toasta shows before it's removed. Set to null/0 to turn off.\n      this.timeout = 5000;\n      // What theme to use\n      this.theme = 'default';\n    }\n  }\n  ToastaConfig.ɵfac = function ToastaConfig_Factory(t) {\n    return new (t || ToastaConfig)();\n  };\n  ToastaConfig.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ToastaConfig,\n    factory: ToastaConfig.ɵfac\n  });\n  return ToastaConfig;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nvar ToastaEventType = /*#__PURE__*/(() => {\n  ToastaEventType = ToastaEventType || {};\n  ToastaEventType[ToastaEventType[\"ADD\"] = 0] = \"ADD\";\n  ToastaEventType[ToastaEventType[\"CLEAR\"] = 1] = \"CLEAR\";\n  ToastaEventType[ToastaEventType[\"CLEAR_ALL\"] = 2] = \"CLEAR_ALL\";\n  return ToastaEventType;\n})();\nclass ToastaEvent {\n  constructor(type, value) {\n    this.type = type;\n    this.value = value;\n  }\n}\nfunction toastaServiceFactory(config) {\n  return new ToastaService(config);\n}\n/**\r\n * Toasta service helps create different kinds of Toasts\r\n */\nlet ToastaService = /*#__PURE__*/(() => {\n  class ToastaService {\n    constructor(config) {\n      this.config = config;\n      // Init the counter\n      this.uniqueCounter = 0;\n      // ToastData event emitter\n      // private toastsEmitter: EventEmitter<ToastData> = new EventEmitter<ToastData>();\n      // Clear event emitter\n      // private clearEmitter: EventEmitter<number> = new EventEmitter<number>();\n      this.eventSource = new Subject();\n      this.events = this.eventSource.asObservable();\n    }\n    /**\r\n     * Get list of toats\r\n     */\n    // getToasts(): Observable<ToastData> {\n    //   return this.toastsEmitter.asObservable();\n    // }\n    // getClear(): Observable<number> {\n    //   return this.clearEmitter.asObservable();\n    // }\n    /**\r\n     * Create Toast of a default type\r\n     */\n    default(options) {\n      this.add(options, 'default');\n    }\n    /**\r\n     * Create Toast of info type\r\n     * @param options Individual toasta config overrides\r\n     */\n    info(options) {\n      this.add(options, 'info');\n    }\n    /**\r\n     * Create Toast of success type\r\n     * @param options Individual toasta config overrides\r\n     */\n    success(options) {\n      this.add(options, 'success');\n    }\n    /**\r\n     * Create Toast of wait type\r\n     * @param options Individual toasta config overrides\r\n     */\n    wait(options) {\n      this.add(options, 'wait');\n    }\n    /**\r\n     * Create Toast of error type\r\n     * @param options Individual toasta config overrides\r\n     */\n    error(options) {\n      this.add(options, 'error');\n    }\n    /**\r\n     * Create Toast of warning type\r\n     * @param options Individual toasta config overrides\r\n     */\n    warning(options) {\n      this.add(options, 'warning');\n    }\n    // Add a new toast item\n    add(options, type) {\n      let toastaOptions;\n      if (isString(options) && options !== '' || isNumber(options)) {\n        toastaOptions = {\n          title: options.toString()\n        };\n      } else {\n        toastaOptions = options;\n      }\n      if (!toastaOptions || !toastaOptions.title && !toastaOptions.msg) {\n        throw new Error('ngx-toasta: No toast title or message specified!');\n      }\n      type = type || 'default';\n      // Set a unique counter for an id\n      this.uniqueCounter++;\n      // Set the local vs global config items\n      const showClose = this._checkConfigBooleanItem(this.config, toastaOptions, 'showClose');\n      // Set the local vs global config items\n      const showDuration = this._checkConfigBooleanItem(this.config, toastaOptions, 'showDuration');\n      // If we have a theme set, make sure it's a valid one\n      let theme;\n      if (toastaOptions.theme) {\n        theme = ToastaService.THEMES.indexOf(toastaOptions.theme) > -1 ? toastaOptions.theme : this.config.theme;\n      } else {\n        theme = this.config.theme;\n      }\n      const toast = {\n        id: this.uniqueCounter,\n        title: toastaOptions.title,\n        msg: toastaOptions.msg,\n        showClose,\n        showDuration,\n        type: 'toasta-type-' + type,\n        theme: 'toasta-theme-' + theme,\n        // If there's a timeout individually or globally, set the toast to timeout\n        // Allows a caller to pass null/0 and override the default. Can also set the default to null/0 to turn off.\n        timeout: toastaOptions.hasOwnProperty('timeout') ? toastaOptions.timeout ?? 0 : this.config.timeout,\n        onAdd: toastaOptions.onAdd && isFunction(toastaOptions.onAdd) ? toastaOptions.onAdd : undefined,\n        onRemove: toastaOptions.onRemove && isFunction(toastaOptions.onRemove) ? toastaOptions.onRemove : undefined\n      };\n      // Push up a new toast item\n      // this.toastsSubscriber.next(toast);\n      // this.toastsEmitter.next(toast);\n      this.emitEvent(new ToastaEvent(ToastaEventType.ADD, toast));\n      // If we have a onAdd function, call it here\n      if (toastaOptions.onAdd && isFunction(toastaOptions.onAdd)) {\n        toastaOptions.onAdd.call(this, toast);\n      }\n    }\n    // Clear all toasts\n    clearAll() {\n      // this.clearEmitter.next(null);\n      this.emitEvent(new ToastaEvent(ToastaEventType.CLEAR_ALL));\n    }\n    // Clear the specific one\n    clear(id) {\n      // this.clearEmitter.next(id);\n      this.emitEvent(new ToastaEvent(ToastaEventType.CLEAR, id));\n    }\n    // Checks whether the local option is set, if not,\n    // checks the global config\n    _checkConfigBooleanItem(config, options, property) {\n      if (options[property] === false) {\n        return false;\n      } else if (!options[property]) {\n        return config[property];\n      } else {\n        return true;\n      }\n    }\n    emitEvent(event) {\n      if (this.eventSource) {\n        // Push up a new event\n        this.eventSource.next(event);\n      }\n    }\n  }\n  // Allowed THEMES\n  ToastaService.THEMES = ['default', 'material', 'bootstrap'];\n  ToastaService.ɵfac = function ToastaService_Factory(t) {\n    return new (t || ToastaService)(i0.ɵɵinject(ToastaConfig));\n  };\n  ToastaService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ToastaService,\n    factory: ToastaService.ɵfac\n  });\n  return ToastaService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet SafeHtmlPipe = /*#__PURE__*/(() => {\n  class SafeHtmlPipe {\n    constructor(domSanitized) {\n      this.domSanitized = domSanitized;\n    }\n    transform(value, ...args) {\n      return this.domSanitized.bypassSecurityTrustHtml(value);\n    }\n  }\n  SafeHtmlPipe.ɵfac = function SafeHtmlPipe_Factory(t) {\n    return new (t || SafeHtmlPipe)(i0.ɵɵdirectiveInject(i1.DomSanitizer, 16));\n  };\n  SafeHtmlPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"safeHtml\",\n    type: SafeHtmlPipe,\n    pure: true\n  });\n  return SafeHtmlPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\r\n * A Toast component shows message with title and close button.\r\n */\nlet ToastComponent = /*#__PURE__*/(() => {\n  class ToastComponent {\n    constructor() {\n      this.progressPercent = 0;\n      this.startTime = performance.now();\n      this.closeToastEvent = new EventEmitter();\n    }\n    ngAfterViewInit() {\n      if (this.toast.showDuration && this.toast.timeout > 0) {\n        this.progressInterval = window.setInterval(() => {\n          this.progressPercent = 100 - (performance.now() - this.startTime) / this.toast.timeout * 100; // Descending progress\n          if (this.progressPercent <= 0) {\n            clearInterval(this.progressInterval);\n          }\n        }, 16.7); // 60 fps\n      }\n    }\n    /**\r\n     * Event handler invokes when user clicks on close button.\r\n     * This method emit new event into ToastaContainer to close it.\r\n     */\n    close($event) {\n      $event.preventDefault();\n      this.closeToastEvent.next(this.toast);\n      if (this.progressInterval) {\n        clearInterval(this.progressInterval);\n      }\n    }\n  }\n  ToastComponent.ɵfac = function ToastComponent_Factory(t) {\n    return new (t || ToastComponent)();\n  };\n  ToastComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ToastComponent,\n    selectors: [[\"ngx-toast\"]],\n    inputs: {\n      toast: \"toast\"\n    },\n    outputs: {\n      closeToastEvent: \"closeToast\"\n    },\n    decls: 4,\n    vars: 7,\n    consts: [[1, \"toast\", 3, \"ngClass\"], [\"class\", \"close-button\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"toast-text\", 4, \"ngIf\"], [\"class\", \"durationbackground\", 4, \"ngIf\"], [1, \"close-button\", 3, \"click\"], [1, \"toast-text\"], [\"class\", \"toast-title\", 3, \"innerHTML\", 4, \"ngIf\"], [4, \"ngIf\"], [\"class\", \"toast-msg\", 3, \"innerHtml\", 4, \"ngIf\"], [1, \"toast-title\", 3, \"innerHTML\"], [1, \"toast-msg\", 3, \"innerHtml\"], [1, \"durationbackground\"], [1, \"durationbar\"]],\n    template: function ToastComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, ToastComponent_div_1_Template, 1, 0, \"div\", 1);\n        i0.ɵɵtemplate(2, ToastComponent_div_2_Template, 4, 3, \"div\", 2);\n        i0.ɵɵtemplate(3, ToastComponent_div_3_Template, 2, 2, \"div\", 3);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(4, _c0, ctx.toast.type, ctx.toast.theme));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.toast.showClose);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.toast.title || ctx.toast.msg);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.toast.showDuration && ctx.toast.timeout > 0);\n      }\n    },\n    dependencies: [i1$1.NgClass, i1$1.NgIf, SafeHtmlPipe],\n    encapsulation: 2\n  });\n  return ToastComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\r\n * Toasta is container for Toast components\r\n */\nlet ToastaComponent = /*#__PURE__*/(() => {\n  class ToastaComponent {\n    // The window position where the toast pops up. Possible values:\n    // - bottom-right (default value from ToastConfig)\n    // - bottom-left\n    // - bottom-center\n    // - bottom-fullwidth\n    // - top-right\n    // - top-left\n    // - top-center\n    // - top-fullwidth\n    // - center-center\n    set position(value) {\n      if (value) {\n        let notFound = true;\n        for (let i = 0; i < ToastaComponent.POSITIONS.length; i++) {\n          if (ToastaComponent.POSITIONS[i] === value) {\n            notFound = false;\n            break;\n          }\n        }\n        if (notFound) {\n          // Position was wrong - clear it here to use the one from config.\n          value = this.config.position;\n        }\n      } else {\n        value = this.config.position;\n      }\n      this._position = 'toasta-position-' + value;\n    }\n    get position() {\n      return this._position;\n    }\n    constructor(config, toastaService) {\n      this.config = config;\n      this.toastaService = toastaService;\n      this._position = '';\n      // The storage for toasts.\n      this.toasts = [];\n      // Initialise position\n      this.position = '';\n    }\n    /**\r\n     * `ngOnInit` is called right after the directive's data-bound properties have been checked for the\r\n     * first time, and before any of its children have been checked. It is invoked only once when the\r\n     * directive is instantiated.\r\n     */\n    ngOnInit() {\n      // We listen events from our service\n      this.toastaService.events.subscribe(event => {\n        if (event.type === ToastaEventType.ADD) {\n          // Add the new one\n          const toast = event.value;\n          this.add(toast);\n        } else if (event.type === ToastaEventType.CLEAR) {\n          // Clear the one by number\n          const id = event.value;\n          this.clear(id);\n        } else if (event.type === ToastaEventType.CLEAR_ALL) {\n          // Lets clear all toasts\n          this.clearAll();\n        }\n      });\n    }\n    /**\r\n     * Event listener of 'closeToast' event comes from ToastaComponent.\r\n     * This method removes ToastComponent assosiated with this Toast.\r\n     */\n    closeToast(toast) {\n      this.clear(toast.id);\n    }\n    /**\r\n     * Add new Toast\r\n     */\n    add(toast) {\n      // If we've gone over our limit, remove the earliest\n      // one from the array\n      if (this.config.limit && this.toasts.length >= this.config.limit) {\n        this.toasts.shift();\n      }\n      // Add toasta to array\n      this.toasts.push(toast);\n      //\n      // If there's a timeout individually or globally,\n      // set the toast to timeout\n      if (+toast.timeout) {\n        this._setTimeout(toast);\n      }\n    }\n    /**\r\n     * Clear individual toast by id\r\n     * @param id is unique identifier of Toast\r\n     */\n    clear(id) {\n      if (id) {\n        this.toasts.forEach((value, key) => {\n          if (value.id === id) {\n            if (value.onRemove && isFunction(value.onRemove)) {\n              value.onRemove.call(this, value);\n            }\n            this.toasts.splice(key, 1);\n          }\n        });\n      } else {\n        throw new Error('Please provide id of Toast to close');\n      }\n    }\n    /**\r\n     * Clear all toasts\r\n     */\n    clearAll() {\n      this.toasts.forEach((value, key) => {\n        if (value.onRemove && isFunction(value.onRemove)) {\n          value.onRemove.call(this, value);\n        }\n      });\n      this.toasts = [];\n    }\n    /**\r\n     * Custom setTimeout function for specific setTimeouts on individual toasts.\r\n     */\n    _setTimeout(toast) {\n      window.setTimeout(() => {\n        this.clear(toast.id);\n      }, toast.timeout);\n    }\n  }\n  /**\r\n   * Set of constants defines position of Toasta on the page.\r\n   */\n  ToastaComponent.POSITIONS = ['bottom-right', 'bottom-left', 'bottom-center', 'bottom-fullwidth', 'top-right', 'top-left', 'top-center', 'top-fullwidth', 'center-center'];\n  ToastaComponent.ɵfac = function ToastaComponent_Factory(t) {\n    return new (t || ToastaComponent)(i0.ɵɵdirectiveInject(ToastaConfig), i0.ɵɵdirectiveInject(ToastaService));\n  };\n  ToastaComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ToastaComponent,\n    selectors: [[\"ngx-toasta\"]],\n    inputs: {\n      position: \"position\"\n    },\n    decls: 2,\n    vars: 4,\n    consts: [[\"id\", \"toasta\", 3, \"ngClass\"], [3, \"toast\", \"closeToast\", 4, \"ngFor\", \"ngForOf\"], [3, \"toast\", \"closeToast\"]],\n    template: function ToastaComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, ToastaComponent_ngx_toast_1_Template, 1, 1, \"ngx-toast\", 1);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(2, _c1, ctx.position));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.toasts);\n      }\n    },\n    dependencies: [i1$1.NgClass, i1$1.NgForOf, ToastComponent],\n    encapsulation: 2\n  });\n  return ToastaComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet providers = [ToastaConfig, {\n  provide: ToastaService,\n  useFactory: toastaServiceFactory,\n  deps: [ToastaConfig]\n}];\nlet ToastaModule = /*#__PURE__*/(() => {\n  class ToastaModule {\n    static forRoot() {\n      return {\n        ngModule: ToastaModule,\n        providers\n      };\n    }\n  }\n  ToastaModule.ɵfac = function ToastaModule_Factory(t) {\n    return new (t || ToastaModule)();\n  };\n  ToastaModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ToastaModule\n  });\n  ToastaModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: providers,\n    imports: [CommonModule]\n  });\n  return ToastaModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\r\n * Public API Surface of ngx-toasta\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { SafeHtmlPipe, ToastComponent, ToastData, ToastOptions, ToastaComponent, ToastaConfig, ToastaEvent, ToastaEventType, ToastaModule, ToastaService, providers, toastaServiceFactory };\n//# sourceMappingURL=ngx-toasta.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}