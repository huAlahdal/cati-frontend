{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nimport { Inject, Injectable, InjectionToken, Injector, Optional, SkipSelf, TemplateRef } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { OwlDialogConfig } from './dialog-config.class';\nimport { OwlDialogRef } from './dialog-ref.class';\nimport { OwlDialogContainerComponent } from './dialog-container.component';\nimport { extendObject } from '../utils';\nimport { defer, Subject } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { Overlay, OverlayConfig, OverlayContainer } from '@angular/cdk/overlay';\nimport { ComponentPortal, PortalInjector } from '@angular/cdk/portal';\nexport var OWL_DIALOG_DATA = new InjectionToken('OwlDialogData');\nexport var OWL_DIALOG_SCROLL_STRATEGY = new InjectionToken('owl-dialog-scroll-strategy');\nexport function OWL_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.block();\n  };\n}\nexport var OWL_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: OWL_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: OWL_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\nexport var OWL_DIALOG_DEFAULT_OPTIONS = new InjectionToken('owl-dialog-default-options');\nvar OwlDialogService = function () {\n  function OwlDialogService(overlay, injector, location, scrollStrategy, defaultOptions, parentDialog, overlayContainer) {\n    var _this = this;\n    this.overlay = overlay;\n    this.injector = injector;\n    this.location = location;\n    this.scrollStrategy = scrollStrategy;\n    this.defaultOptions = defaultOptions;\n    this.parentDialog = parentDialog;\n    this.overlayContainer = overlayContainer;\n    this.ariaHiddenElements = new Map();\n    this._openDialogsAtThisLevel = [];\n    this._afterOpenAtThisLevel = new Subject();\n    this._afterAllClosedAtThisLevel = new Subject();\n    this.afterAllClosed = defer(function () {\n      return _this._openDialogsAtThisLevel.length ? _this._afterAllClosed : _this._afterAllClosed.pipe(startWith(undefined));\n    });\n    if (!parentDialog && location) {\n      location.subscribe(function () {\n        return _this.closeAll();\n      });\n    }\n  }\n  Object.defineProperty(OwlDialogService.prototype, \"openDialogs\", {\n    get: function () {\n      return this.parentDialog ? this.parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(OwlDialogService.prototype, \"afterOpen\", {\n    get: function () {\n      return this.parentDialog ? this.parentDialog.afterOpen : this._afterOpenAtThisLevel;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(OwlDialogService.prototype, \"_afterAllClosed\", {\n    get: function () {\n      var parent = this.parentDialog;\n      return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  OwlDialogService.prototype.open = function (componentOrTemplateRef, config) {\n    var _this = this;\n    config = applyConfigDefaults(config, this.defaultOptions);\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(\"Dialog with id \\\"\" + config.id + \"\\\" exists already. The dialog id must be unique.\");\n    }\n    var overlayRef = this.createOverlay(config);\n    var dialogContainer = this.attachDialogContainer(overlayRef, config);\n    var dialogRef = this.attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n    if (!this.openDialogs.length) {\n      this.hideNonDialogContentFromAssistiveTechnology();\n    }\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(function () {\n      return _this.removeOpenDialog(dialogRef);\n    });\n    this.afterOpen.next(dialogRef);\n    return dialogRef;\n  };\n  OwlDialogService.prototype.closeAll = function () {\n    var i = this.openDialogs.length;\n    while (i--) {\n      this.openDialogs[i].close();\n    }\n  };\n  OwlDialogService.prototype.getDialogById = function (id) {\n    return this.openDialogs.find(function (dialog) {\n      return dialog.id === id;\n    });\n  };\n  OwlDialogService.prototype.attachDialogContent = function (componentOrTemplateRef, dialogContainer, overlayRef, config) {\n    var dialogRef = new OwlDialogRef(overlayRef, dialogContainer, config.id, this.location);\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(function () {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n    if (componentOrTemplateRef instanceof TemplateRef) {} else {\n      var injector = this.createInjector(config, dialogRef, dialogContainer);\n      var contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n    dialogRef.updateSize(config.width, config.height).updatePosition(config.position);\n    return dialogRef;\n  };\n  OwlDialogService.prototype.createInjector = function (config, dialogRef, dialogContainer) {\n    var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    var injectionTokens = new WeakMap();\n    injectionTokens.set(OwlDialogRef, dialogRef);\n    injectionTokens.set(OwlDialogContainerComponent, dialogContainer);\n    injectionTokens.set(OWL_DIALOG_DATA, config.data);\n    return new PortalInjector(userInjector || this.injector, injectionTokens);\n  };\n  OwlDialogService.prototype.createOverlay = function (config) {\n    var overlayConfig = this.getOverlayConfig(config);\n    return this.overlay.create(overlayConfig);\n  };\n  OwlDialogService.prototype.attachDialogContainer = function (overlayRef, config) {\n    var containerPortal = new ComponentPortal(OwlDialogContainerComponent, config.viewContainerRef);\n    var containerRef = overlayRef.attach(containerPortal);\n    containerRef.instance.setConfig(config);\n    return containerRef.instance;\n  };\n  OwlDialogService.prototype.getOverlayConfig = function (dialogConfig) {\n    var state = new OverlayConfig({\n      positionStrategy: this.overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this.scrollStrategy(),\n      panelClass: dialogConfig.paneClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n    return state;\n  };\n  OwlDialogService.prototype.removeOpenDialog = function (dialogRef) {\n    var index = this._openDialogsAtThisLevel.indexOf(dialogRef);\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n      if (!this.openDialogs.length) {\n        this.ariaHiddenElements.forEach(function (previousValue, element) {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n        this.ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  };\n  OwlDialogService.prototype.hideNonDialogContentFromAssistiveTechnology = function () {\n    var overlayContainer = this.overlayContainer.getContainerElement();\n    if (overlayContainer.parentElement) {\n      var siblings = overlayContainer.parentElement.children;\n      for (var i = siblings.length - 1; i > -1; i--) {\n        var sibling = siblings[i];\n        if (sibling !== overlayContainer && sibling.nodeName !== 'SCRIPT' && sibling.nodeName !== 'STYLE' && !sibling.hasAttribute('aria-live')) {\n          this.ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  };\n  OwlDialogService = __decorate([Injectable(), __param(2, Optional()), __param(3, Inject(OWL_DIALOG_SCROLL_STRATEGY)), __param(4, Optional()), __param(4, Inject(OWL_DIALOG_DEFAULT_OPTIONS)), __param(5, Optional()), __param(5, SkipSelf()), __metadata(\"design:paramtypes\", [Overlay, Injector, Location, Function, OwlDialogConfig, OwlDialogService, OverlayContainer])], OwlDialogService);\n  return OwlDialogService;\n}();\nexport { OwlDialogService };\nfunction applyConfigDefaults(config, defaultOptions) {\n  return extendObject(new OwlDialogConfig(), config, defaultOptions);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}