{"ast":null,"code":"import { Injectable, EventEmitter, Component, Renderer2, ElementRef, Directive, ViewContainerRef, Input, Output, forwardRef, Host, ChangeDetectorRef, ChangeDetectionStrategy, NgModule, ViewChild } from '@angular/core';\nimport { filter, map, take, takeUntil } from 'rxjs/operators';\nimport { getMonth, getFullYear, isFirstDayOfWeek, getDay, shiftDate, isBefore, endOf, isAfter, startOf, isArray, isSame, getFirstDayOfMonth, formatDate, getLocale, isSameMonth, isSameDay, isDisabledDay, isSameYear, isDateValid, setFullDate, isDate, parseDate, utcAsLocal } from 'ngx-bootstrap/chronos';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { MiniStore, MiniState } from 'ngx-bootstrap/mini-ngrx';\nimport { PositioningService } from 'ngx-bootstrap/positioning';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { isBs3 } from 'ngx-bootstrap/utils';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * For date range picker there are `BsDaterangepickerConfig` which inherits all properties,\n * except `displayMonths`, for range picker it default to `2`\n */\nclass BsDatepickerConfig {\n  constructor() {\n    /**\n     * sets use adaptive position\n     */\n    this.adaptivePosition = false;\n    /**\n     * sets use UTC date time format\n     */\n    this.useUtc = false;\n    /**\n     * turn on/off animation\n     */\n    this.isAnimated = false;\n    /**\n     * If true, returns focus to the datepicker / daterangepicker input after date selection\n     */\n    this.returnFocusToInput = false;\n    /**\n     * CSS class which will be applied to datepicker container,\n     * usually used to set color theme\n     */\n    this.containerClass = 'theme-green';\n    // DatepickerRenderOptions\n    this.displayMonths = 1;\n    /**\n     * Allows to hide week numbers in datepicker\n     */\n    this.showWeekNumbers = true;\n    this.dateInputFormat = 'L';\n    // range picker\n    this.rangeSeparator = ' - ';\n    /**\n     * Date format for date range input field\n     */\n    this.rangeInputFormat = 'L';\n    // DatepickerFormatOptions\n    this.monthTitle = 'MMMM';\n    this.yearTitle = 'YYYY';\n    this.dayLabel = 'D';\n    this.monthLabel = 'MMMM';\n    this.yearLabel = 'YYYY';\n    this.weekNumbers = 'w';\n  }\n}\nif (false) {\n  /**\n   * sets use adaptive position\n   * @type {?}\n   */\n  BsDatepickerConfig.prototype.adaptivePosition;\n  /**\n   * sets use UTC date time format\n   * @type {?}\n   */\n  BsDatepickerConfig.prototype.useUtc;\n  /**\n   * turn on/off animation\n   * @type {?}\n   */\n  BsDatepickerConfig.prototype.isAnimated;\n  /** @type {?} */\n  BsDatepickerConfig.prototype.value;\n  /** @type {?} */\n  BsDatepickerConfig.prototype.isDisabled;\n  /**\n   * Default min date for all date/range pickers\n   * @type {?}\n   */\n  BsDatepickerConfig.prototype.minDate;\n  /**\n   * Default max date for all date/range pickers\n   * @type {?}\n   */\n  BsDatepickerConfig.prototype.maxDate;\n  /**\n   * Default date custom classes for all date/range pickers\n   * @type {?}\n   */\n  BsDatepickerConfig.prototype.dateCustomClasses;\n  /**\n   * Disable specific days, e.g. [0,6] will disable all Saturdays and Sundays\n   * @type {?}\n   */\n  BsDatepickerConfig.prototype.daysDisabled;\n  /**\n   * Disable specific dates\n   * @type {?}\n   */\n  BsDatepickerConfig.prototype.datesDisabled;\n  /**\n   * Show one months for special cases (only for dateRangePicker)\n   * 1. maxDate is equal to today's date\n   * 2. minDate's month is equal to maxDate's month\n   * @type {?}\n   */\n  BsDatepickerConfig.prototype.displayOneMonthRange;\n  /**\n   * Enable specific dates\n   * @type {?}\n   */\n  BsDatepickerConfig.prototype.datesEnabled;\n  /**\n   * Makes dates from other months active\n   * @type {?}\n   */\n  BsDatepickerConfig.prototype.selectFromOtherMonth;\n  /**\n   * Allows select first date of the week by click on week number\n   * @type {?}\n   */\n  BsDatepickerConfig.prototype.selectWeek;\n  /**\n   * Allows select daterange as first and last day of week by click on week number (dateRangePicker only)\n   * @type {?}\n   */\n  BsDatepickerConfig.prototype.selectWeekDateRange;\n  /**\n   * Shows previous and current month, instead of current and next (dateRangePicker only)\n   * @type {?}\n   */\n  BsDatepickerConfig.prototype.showPreviousMonth;\n  /**\n   * Add class to current day\n   * @type {?}\n   */\n  BsDatepickerConfig.prototype.customTodayClass;\n  /**\n   * Default mode for all date pickers\n   * @type {?}\n   */\n  BsDatepickerConfig.prototype.minMode;\n  /**\n   * If true, returns focus to the datepicker / daterangepicker input after date selection\n   * @type {?}\n   */\n  BsDatepickerConfig.prototype.returnFocusToInput;\n  /**\n   * CSS class which will be applied to datepicker container,\n   * usually used to set color theme\n   * @type {?}\n   */\n  BsDatepickerConfig.prototype.containerClass;\n  /** @type {?} */\n  BsDatepickerConfig.prototype.displayMonths;\n  /**\n   * Allows to hide week numbers in datepicker\n   * @type {?}\n   */\n  BsDatepickerConfig.prototype.showWeekNumbers;\n  /** @type {?} */\n  BsDatepickerConfig.prototype.dateInputFormat;\n  /** @type {?} */\n  BsDatepickerConfig.prototype.rangeSeparator;\n  /**\n   * Date format for date range input field\n   * @type {?}\n   */\n  BsDatepickerConfig.prototype.rangeInputFormat;\n  /**\n   * Predefined ranges\n   * @type {?}\n   */\n  BsDatepickerConfig.prototype.ranges;\n  /** @type {?} */\n  BsDatepickerConfig.prototype.monthTitle;\n  /** @type {?} */\n  BsDatepickerConfig.prototype.yearTitle;\n  /** @type {?} */\n  BsDatepickerConfig.prototype.dayLabel;\n  /** @type {?} */\n  BsDatepickerConfig.prototype.monthLabel;\n  /** @type {?} */\n  BsDatepickerConfig.prototype.yearLabel;\n  /** @type {?} */\n  BsDatepickerConfig.prototype.weekNumbers;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nclass BsDatepickerAbstractComponent {\n  constructor() {\n    this.customRanges = [];\n    this.chosenRange = [];\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set minDate(value) {\n    this._effects.setMinDate(value);\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set maxDate(value) {\n    this._effects.setMaxDate(value);\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set daysDisabled(value) {\n    this._effects.setDaysDisabled(value);\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set datesDisabled(value) {\n    this._effects.setDatesDisabled(value);\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set datesEnabled(value) {\n    this._effects.setDatesEnabled(value);\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set isDisabled(value) {\n    this._effects.setDisabled(value);\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set dateCustomClasses(value) {\n    this._effects.setDateCustomClasses(value);\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  setViewMode(event) {}\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  navigateTo(event) {}\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  dayHoverHandler(event) {}\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  weekHoverHandler(event) {}\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  monthHoverHandler(event) {}\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  yearHoverHandler(event) {}\n  /**\n   * @param {?} day\n   * @return {?}\n   */\n  daySelectHandler(day) {}\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  monthSelectHandler(event) {}\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  yearSelectHandler(event) {}\n  /**\n   * @param {?} dates\n   * @return {?}\n   */\n  setRangeOnCalendar(dates) {}\n  /* tslint:disable-next-line: no-any */\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  _stopPropagation(event) {\n    event.stopPropagation();\n  }\n}\nif (false) {\n  /** @type {?} */\n  BsDatepickerAbstractComponent.prototype.containerClass;\n  /** @type {?} */\n  BsDatepickerAbstractComponent.prototype.isOtherMonthsActive;\n  /** @type {?} */\n  BsDatepickerAbstractComponent.prototype._effects;\n  /** @type {?} */\n  BsDatepickerAbstractComponent.prototype.customRanges;\n  /** @type {?} */\n  BsDatepickerAbstractComponent.prototype.chosenRange;\n  /** @type {?} */\n  BsDatepickerAbstractComponent.prototype.viewMode;\n  /** @type {?} */\n  BsDatepickerAbstractComponent.prototype.daysCalendar;\n  /** @type {?} */\n  BsDatepickerAbstractComponent.prototype.monthsCalendar;\n  /** @type {?} */\n  BsDatepickerAbstractComponent.prototype.yearsCalendar;\n  /** @type {?} */\n  BsDatepickerAbstractComponent.prototype.options;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nlet BsDatepickerActions = /*#__PURE__*/(() => {\n  class BsDatepickerActions {\n    /**\n     * @return {?}\n     */\n    calculate() {\n      return {\n        type: BsDatepickerActions.CALCULATE\n      };\n    }\n    /**\n     * @return {?}\n     */\n    format() {\n      return {\n        type: BsDatepickerActions.FORMAT\n      };\n    }\n    /**\n     * @return {?}\n     */\n    flag() {\n      return {\n        type: BsDatepickerActions.FLAG\n      };\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    select(date) {\n      return {\n        type: BsDatepickerActions.SELECT,\n        payload: date\n      };\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    changeViewMode(event) {\n      return {\n        type: BsDatepickerActions.CHANGE_VIEWMODE,\n        payload: event\n      };\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    navigateTo(event) {\n      return {\n        type: BsDatepickerActions.NAVIGATE_TO,\n        payload: event\n      };\n    }\n    /**\n     * @param {?} step\n     * @return {?}\n     */\n    navigateStep(step) {\n      return {\n        type: BsDatepickerActions.NAVIGATE_OFFSET,\n        payload: step\n      };\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    setOptions(options) {\n      return {\n        type: BsDatepickerActions.SET_OPTIONS,\n        payload: options\n      };\n    }\n    // date range picker\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    selectRange(value) {\n      return {\n        type: BsDatepickerActions.SELECT_RANGE,\n        payload: value\n      };\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    hoverDay(event) {\n      return {\n        type: BsDatepickerActions.HOVER,\n        payload: event.isHovered ? event.cell.date : null\n      };\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    minDate(date) {\n      return {\n        type: BsDatepickerActions.SET_MIN_DATE,\n        payload: date\n      };\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    maxDate(date) {\n      return {\n        type: BsDatepickerActions.SET_MAX_DATE,\n        payload: date\n      };\n    }\n    /**\n     * @param {?} days\n     * @return {?}\n     */\n    daysDisabled(days) {\n      return {\n        type: BsDatepickerActions.SET_DAYSDISABLED,\n        payload: days\n      };\n    }\n    /**\n     * @param {?} dates\n     * @return {?}\n     */\n    datesDisabled(dates) {\n      return {\n        type: BsDatepickerActions.SET_DATESDISABLED,\n        payload: dates\n      };\n    }\n    /**\n     * @param {?} dates\n     * @return {?}\n     */\n    datesEnabled(dates) {\n      return {\n        type: BsDatepickerActions.SET_DATESENABLED,\n        payload: dates\n      };\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    isDisabled(value) {\n      return {\n        type: BsDatepickerActions.SET_IS_DISABLED,\n        payload: value\n      };\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    setDateCustomClasses(value) {\n      return {\n        type: BsDatepickerActions.SET_DATE_CUSTOM_CLASSES,\n        payload: value\n      };\n    }\n    /**\n     * @param {?} locale\n     * @return {?}\n     */\n    setLocale(locale) {\n      return {\n        type: BsDatepickerActions.SET_LOCALE,\n        payload: locale\n      };\n    }\n  }\n  BsDatepickerActions.CALCULATE = '[datepicker] calculate dates matrix';\n  BsDatepickerActions.FORMAT = '[datepicker] format datepicker values';\n  BsDatepickerActions.FLAG = '[datepicker] set flags';\n  BsDatepickerActions.SELECT = '[datepicker] select date';\n  BsDatepickerActions.NAVIGATE_OFFSET = '[datepicker] shift view date';\n  BsDatepickerActions.NAVIGATE_TO = '[datepicker] change view date';\n  BsDatepickerActions.SET_OPTIONS = '[datepicker] update render options';\n  BsDatepickerActions.HOVER = '[datepicker] hover date';\n  BsDatepickerActions.CHANGE_VIEWMODE = '[datepicker] switch view mode';\n  BsDatepickerActions.SET_MIN_DATE = '[datepicker] set min date';\n  BsDatepickerActions.SET_MAX_DATE = '[datepicker] set max date';\n  BsDatepickerActions.SET_DAYSDISABLED = '[datepicker] set days disabled';\n  BsDatepickerActions.SET_DATESDISABLED = '[datepicker] set dates disabled';\n  BsDatepickerActions.SET_DATESENABLED = '[datepicker] set dates enabled';\n  BsDatepickerActions.SET_IS_DISABLED = '[datepicker] set is disabled';\n  BsDatepickerActions.SET_DATE_CUSTOM_CLASSES = '[datepicker] set date custom classes';\n  BsDatepickerActions.SET_LOCALE = '[datepicker] set datepicker locale';\n  BsDatepickerActions.SELECT_RANGE = '[daterangepicker] select dates range';\n  return BsDatepickerActions;\n})();\nif (false) {\n  /** @type {?} */\n  BsDatepickerActions.CALCULATE;\n  /** @type {?} */\n  BsDatepickerActions.FORMAT;\n  /** @type {?} */\n  BsDatepickerActions.FLAG;\n  /** @type {?} */\n  BsDatepickerActions.SELECT;\n  /** @type {?} */\n  BsDatepickerActions.NAVIGATE_OFFSET;\n  /** @type {?} */\n  BsDatepickerActions.NAVIGATE_TO;\n  /** @type {?} */\n  BsDatepickerActions.SET_OPTIONS;\n  /** @type {?} */\n  BsDatepickerActions.HOVER;\n  /** @type {?} */\n  BsDatepickerActions.CHANGE_VIEWMODE;\n  /** @type {?} */\n  BsDatepickerActions.SET_MIN_DATE;\n  /** @type {?} */\n  BsDatepickerActions.SET_MAX_DATE;\n  /** @type {?} */\n  BsDatepickerActions.SET_DAYSDISABLED;\n  /** @type {?} */\n  BsDatepickerActions.SET_DATESDISABLED;\n  /** @type {?} */\n  BsDatepickerActions.SET_DATESENABLED;\n  /** @type {?} */\n  BsDatepickerActions.SET_IS_DISABLED;\n  /** @type {?} */\n  BsDatepickerActions.SET_DATE_CUSTOM_CLASSES;\n  /** @type {?} */\n  BsDatepickerActions.SET_LOCALE;\n  /** @type {?} */\n  BsDatepickerActions.SELECT_RANGE;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass BsLocaleService {\n  constructor() {\n    this._defaultLocale = 'en';\n    this._locale = new BehaviorSubject(this._defaultLocale);\n    this._localeChange = this._locale.asObservable();\n  }\n  /**\n   * @return {?}\n   */\n  get locale() {\n    return this._locale;\n  }\n  /**\n   * @return {?}\n   */\n  get localeChange() {\n    return this._localeChange;\n  }\n  /**\n   * @return {?}\n   */\n  get currentLocale() {\n    return this._locale.getValue();\n  }\n  /**\n   * @param {?} locale\n   * @return {?}\n   */\n  use(locale) {\n    if (locale === this.currentLocale) {\n      return;\n    }\n    this._locale.next(locale);\n  }\n}\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  BsLocaleService.prototype._defaultLocale;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsLocaleService.prototype._locale;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsLocaleService.prototype._localeChange;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass BsDatepickerEffects {\n  /**\n   * @param {?} _actions\n   * @param {?} _localeService\n   */\n  constructor(_actions, _localeService) {\n    this._actions = _actions;\n    this._localeService = _localeService;\n    this._subs = [];\n  }\n  /**\n   * @param {?} _bsDatepickerStore\n   * @return {?}\n   */\n  init(_bsDatepickerStore) {\n    this._store = _bsDatepickerStore;\n    return this;\n  }\n  /**\n   * setters\n   * @param {?} value\n   * @return {?}\n   */\n  setValue(value) {\n    this._store.dispatch(this._actions.select(value));\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  setRangeValue(value) {\n    this._store.dispatch(this._actions.selectRange(value));\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  setMinDate(value) {\n    this._store.dispatch(this._actions.minDate(value));\n    return this;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  setMaxDate(value) {\n    this._store.dispatch(this._actions.maxDate(value));\n    return this;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  setDaysDisabled(value) {\n    this._store.dispatch(this._actions.daysDisabled(value));\n    return this;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  setDatesDisabled(value) {\n    this._store.dispatch(this._actions.datesDisabled(value));\n    return this;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  setDatesEnabled(value) {\n    this._store.dispatch(this._actions.datesEnabled(value));\n    return this;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  setDisabled(value) {\n    this._store.dispatch(this._actions.isDisabled(value));\n    return this;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  setDateCustomClasses(value) {\n    this._store.dispatch(this._actions.setDateCustomClasses(value));\n    return this;\n  }\n  /* Set rendering options */\n  /**\n   * @param {?} _config\n   * @return {?}\n   */\n  setOptions(_config) {\n    /** @type {?} */\n    const _options = Object.assign({\n      locale: this._localeService.currentLocale\n    }, _config);\n    this._store.dispatch(this._actions.setOptions(_options));\n    return this;\n  }\n  /**\n   * view to mode bindings\n   * @param {?} container\n   * @return {?}\n   */\n  setBindings(container) {\n    container.daysCalendar = this._store.select(\n    /**\n    * @param {?} state\n    * @return {?}\n    */\n    state => state.flaggedMonths).pipe(filter(\n    /**\n    * @param {?} months\n    * @return {?}\n    */\n    months => !!months));\n    // month calendar\n    container.monthsCalendar = this._store.select(\n    /**\n    * @param {?} state\n    * @return {?}\n    */\n    state => state.flaggedMonthsCalendar).pipe(filter(\n    /**\n    * @param {?} months\n    * @return {?}\n    */\n    months => !!months));\n    // year calendar\n    container.yearsCalendar = this._store.select(\n    /**\n    * @param {?} state\n    * @return {?}\n    */\n    state => state.yearsCalendarFlagged).pipe(filter(\n    /**\n    * @param {?} years\n    * @return {?}\n    */\n    years => !!years));\n    container.viewMode = this._store.select(\n    /**\n    * @param {?} state\n    * @return {?}\n    */\n    state => state.view.mode);\n    container.options = this._store.select(\n    /**\n    * @param {?} state\n    * @return {?}\n    */\n    state => state.showWeekNumbers).pipe(map(\n    /**\n    * @param {?} showWeekNumbers\n    * @return {?}\n    */\n    showWeekNumbers => ({\n      showWeekNumbers\n    })));\n    return this;\n  }\n  /**\n   * event handlers\n   * @param {?} container\n   * @return {?}\n   */\n  setEventHandlers(container) {\n    container.setViewMode =\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => {\n      this._store.dispatch(this._actions.changeViewMode(event));\n    };\n    container.navigateTo =\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => {\n      this._store.dispatch(this._actions.navigateStep(event.step));\n    };\n    container.dayHoverHandler =\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => {\n      /** @type {?} */\n      const _cell = /** @type {?} */event.cell;\n      if (_cell.isOtherMonth || _cell.isDisabled) {\n        return;\n      }\n      this._store.dispatch(this._actions.hoverDay(event));\n      _cell.isHovered = event.isHovered;\n    };\n    container.monthHoverHandler =\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => {\n      event.cell.isHovered = event.isHovered;\n    };\n    container.yearHoverHandler =\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => {\n      event.cell.isHovered = event.isHovered;\n    };\n    container.monthSelectHandler =\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => {\n      if (event.isDisabled) {\n        return;\n      }\n      this._store.dispatch(this._actions.navigateTo({\n        unit: {\n          month: getMonth(event.date),\n          year: getFullYear(event.date)\n        },\n        viewMode: 'day'\n      }));\n    };\n    container.yearSelectHandler =\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => {\n      if (event.isDisabled) {\n        return;\n      }\n      this._store.dispatch(this._actions.navigateTo({\n        unit: {\n          year: getFullYear(event.date)\n        },\n        viewMode: 'month'\n      }));\n    };\n    return this;\n  }\n  /**\n   * @return {?}\n   */\n  registerDatepickerSideEffects() {\n    this._subs.push(this._store.select(\n    /**\n    * @param {?} state\n    * @return {?}\n    */\n    state => state.view).subscribe(\n    /**\n    * @param {?} view\n    * @return {?}\n    */\n    view => {\n      this._store.dispatch(this._actions.calculate());\n    }));\n    // format calendar values on month model change\n    this._subs.push(this._store.select(\n    /**\n    * @param {?} state\n    * @return {?}\n    */\n    state => state.monthsModel).pipe(filter(\n    /**\n    * @param {?} monthModel\n    * @return {?}\n    */\n    monthModel => !!monthModel)).subscribe(\n    /**\n    * @param {?} month\n    * @return {?}\n    */\n    month => this._store.dispatch(this._actions.format())));\n    // flag day values\n    this._subs.push(this._store.select(\n    /**\n    * @param {?} state\n    * @return {?}\n    */\n    state => state.formattedMonths).pipe(filter(\n    /**\n    * @param {?} month\n    * @return {?}\n    */\n    month => !!month)).subscribe(\n    /**\n    * @param {?} month\n    * @return {?}\n    */\n    month => this._store.dispatch(this._actions.flag())));\n    // flag day values\n    this._subs.push(this._store.select(\n    /**\n    * @param {?} state\n    * @return {?}\n    */\n    state => state.selectedDate).pipe(filter(\n    /**\n    * @param {?} selectedDate\n    * @return {?}\n    */\n    selectedDate => !!selectedDate)).subscribe(\n    /**\n    * @param {?} selectedDate\n    * @return {?}\n    */\n    selectedDate => this._store.dispatch(this._actions.flag())));\n    // flag for date range picker\n    this._subs.push(this._store.select(\n    /**\n    * @param {?} state\n    * @return {?}\n    */\n    state => state.selectedRange).pipe(filter(\n    /**\n    * @param {?} selectedRange\n    * @return {?}\n    */\n    selectedRange => !!selectedRange)).subscribe(\n    /**\n    * @param {?} selectedRange\n    * @return {?}\n    */\n    selectedRange => this._store.dispatch(this._actions.flag())));\n    // monthsCalendar\n    this._subs.push(this._store.select(\n    /**\n    * @param {?} state\n    * @return {?}\n    */\n    state => state.monthsCalendar).subscribe(\n    /**\n    * @return {?}\n    */\n    () => this._store.dispatch(this._actions.flag())));\n    // years calendar\n    this._subs.push(this._store.select(\n    /**\n    * @param {?} state\n    * @return {?}\n    */\n    state => state.yearsCalendarModel).pipe(filter(\n    /**\n    * @param {?} state\n    * @return {?}\n    */\n    state => !!state)).subscribe(\n    /**\n    * @return {?}\n    */\n    () => this._store.dispatch(this._actions.flag())));\n    // on hover\n    this._subs.push(this._store.select(\n    /**\n    * @param {?} state\n    * @return {?}\n    */\n    state => state.hoveredDate).pipe(filter(\n    /**\n    * @param {?} hoveredDate\n    * @return {?}\n    */\n    hoveredDate => !!hoveredDate)).subscribe(\n    /**\n    * @param {?} hoveredDate\n    * @return {?}\n    */\n    hoveredDate => this._store.dispatch(this._actions.flag())));\n    // date custom classes\n    this._subs.push(this._store.select(\n    /**\n    * @param {?} state\n    * @return {?}\n    */\n    state => state.dateCustomClasses).pipe(filter(\n    /**\n    * @param {?} dateCustomClasses\n    * @return {?}\n    */\n    dateCustomClasses => !!dateCustomClasses)).subscribe(\n    /**\n    * @param {?} dateCustomClasses\n    * @return {?}\n    */\n    dateCustomClasses => this._store.dispatch(this._actions.flag())));\n    // on locale change\n    this._subs.push(this._localeService.localeChange.subscribe(\n    /**\n    * @param {?} locale\n    * @return {?}\n    */\n    locale => this._store.dispatch(this._actions.setLocale(locale))));\n    return this;\n  }\n  /**\n   * @return {?}\n   */\n  destroy() {\n    for (const sub of this._subs) {\n      sub.unsubscribe();\n    }\n  }\n}\n\n/** @nocollapse */\n\nif (false) {\n  /** @type {?} */\n  BsDatepickerEffects.prototype.viewMode;\n  /** @type {?} */\n  BsDatepickerEffects.prototype.daysCalendar;\n  /** @type {?} */\n  BsDatepickerEffects.prototype.monthsCalendar;\n  /** @type {?} */\n  BsDatepickerEffects.prototype.yearsCalendar;\n  /** @type {?} */\n  BsDatepickerEffects.prototype.options;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDatepickerEffects.prototype._store;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDatepickerEffects.prototype._subs;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDatepickerEffects.prototype._actions;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDatepickerEffects.prototype._localeService;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst defaultMonthOptions = {\n  width: 7,\n  height: 6\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction BsDatepickerViewState() {}\nif (false) {\n  /** @type {?} */\n  BsDatepickerViewState.prototype.date;\n  /** @type {?} */\n  BsDatepickerViewState.prototype.mode;\n}\nclass BsDatepickerState {}\nif (false) {\n  /** @type {?} */\n  BsDatepickerState.prototype.selectedDate;\n  /** @type {?} */\n  BsDatepickerState.prototype.selectedRange;\n  /** @type {?} */\n  BsDatepickerState.prototype.view;\n  /** @type {?} */\n  BsDatepickerState.prototype.isDisabled;\n  /** @type {?} */\n  BsDatepickerState.prototype.minDate;\n  /** @type {?} */\n  BsDatepickerState.prototype.maxDate;\n  /** @type {?} */\n  BsDatepickerState.prototype.daysDisabled;\n  /** @type {?} */\n  BsDatepickerState.prototype.datesDisabled;\n  /** @type {?} */\n  BsDatepickerState.prototype.datesEnabled;\n  /** @type {?} */\n  BsDatepickerState.prototype.minMode;\n  /** @type {?} */\n  BsDatepickerState.prototype.dateCustomClasses;\n  /** @type {?} */\n  BsDatepickerState.prototype.hoveredDate;\n  /** @type {?} */\n  BsDatepickerState.prototype.hoveredMonth;\n  /** @type {?} */\n  BsDatepickerState.prototype.hoveredYear;\n  /** @type {?} */\n  BsDatepickerState.prototype.monthsModel;\n  /** @type {?} */\n  BsDatepickerState.prototype.formattedMonths;\n  /** @type {?} */\n  BsDatepickerState.prototype.flaggedMonths;\n  /** @type {?} */\n  BsDatepickerState.prototype.selectFromOtherMonth;\n  /** @type {?} */\n  BsDatepickerState.prototype.showPreviousMonth;\n  /** @type {?} */\n  BsDatepickerState.prototype.displayOneMonthRange;\n  /** @type {?} */\n  BsDatepickerState.prototype.monthsCalendar;\n  /** @type {?} */\n  BsDatepickerState.prototype.flaggedMonthsCalendar;\n  /** @type {?} */\n  BsDatepickerState.prototype.yearsCalendarModel;\n  /** @type {?} */\n  BsDatepickerState.prototype.yearsCalendarFlagged;\n  /** @type {?} */\n  BsDatepickerState.prototype.monthViewOptions;\n  /** @type {?} */\n  BsDatepickerState.prototype.showWeekNumbers;\n  /** @type {?} */\n  BsDatepickerState.prototype.displayMonths;\n  /** @type {?} */\n  BsDatepickerState.prototype.locale;\n  /** @type {?} */\n  BsDatepickerState.prototype.monthTitle;\n  /** @type {?} */\n  BsDatepickerState.prototype.yearTitle;\n  /** @type {?} */\n  BsDatepickerState.prototype.dayLabel;\n  /** @type {?} */\n  BsDatepickerState.prototype.monthLabel;\n  /** @type {?} */\n  BsDatepickerState.prototype.yearLabel;\n  /** @type {?} */\n  BsDatepickerState.prototype.weekNumbers;\n}\n/** @type {?} */\nconst _initialView = {\n  date: new Date(),\n  mode: 'day'\n};\n/** @type {?} */\nconst initialDatepickerState = Object.assign(new BsDatepickerConfig(), {\n  locale: 'en',\n  view: _initialView,\n  selectedRange: [],\n  monthViewOptions: defaultMonthOptions\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} date\n * @param {?} options\n * @return {?}\n */\nfunction getStartingDayOfCalendar(date, options) {\n  if (isFirstDayOfWeek(date, options.firstDayOfWeek)) {\n    return date;\n  }\n  /** @type {?} */\n  const weekDay = getDay(date);\n  /** @type {?} */\n  const offset = calculateDateOffset(weekDay, options.firstDayOfWeek);\n  return shiftDate(date, {\n    day: -offset\n  });\n}\n/**\n * @param {?} weekday\n * @param {?} startingDayOffset\n * @return {?}\n */\nfunction calculateDateOffset(weekday, startingDayOffset) {\n  if (startingDayOffset === 0) {\n    return weekday;\n  }\n  /** @type {?} */\n  const offset = weekday - startingDayOffset % 7;\n  return offset < 0 ? offset + 7 : offset;\n}\n/**\n * @param {?} date\n * @param {?} min\n * @param {?} max\n * @return {?}\n */\nfunction isMonthDisabled(date, min, max) {\n  /** @type {?} */\n  const minBound = min && isBefore(endOf(date, 'month'), min, 'day');\n  /** @type {?} */\n  const maxBound = max && isAfter(startOf(date, 'month'), max, 'day');\n  return minBound || maxBound;\n}\n/**\n * @param {?} date\n * @param {?} min\n * @param {?} max\n * @return {?}\n */\nfunction isYearDisabled(date, min, max) {\n  /** @type {?} */\n  const minBound = min && isBefore(endOf(date, 'year'), min, 'day');\n  /** @type {?} */\n  const maxBound = max && isAfter(startOf(date, 'year'), max, 'day');\n  return minBound || maxBound;\n}\n/**\n * @param {?} date\n * @param {?} datesDisabled\n * @return {?}\n */\nfunction isDisabledDate(date, datesDisabled) {\n  if (!datesDisabled || !isArray(datesDisabled) || !datesDisabled.length) {\n    return false;\n  }\n  return datesDisabled.some(\n  /**\n  * @param {?} dateDisabled\n  * @return {?}\n  */\n  dateDisabled => isSame(date, dateDisabled, 'date'));\n}\n/**\n * @param {?} date\n * @param {?} datesEnabled\n * @return {?}\n */\nfunction isEnabledDate(date, datesEnabled) {\n  if (!datesEnabled || !isArray(datesEnabled) || !datesEnabled.length) {\n    return false;\n  }\n  return !datesEnabled.some(\n  /**\n  * @param {?} enabledDate\n  * @return {?}\n  */\n  enabledDate => isSame(date, enabledDate, 'date'));\n}\n/**\n * @param {?} state\n * @param {?=} calendarIndex\n * @return {?}\n */\nfunction getYearsCalendarInitialDate(state, calendarIndex = 0) {\n  /** @type {?} */\n  const model = state && state.yearsCalendarModel && state.yearsCalendarModel[calendarIndex];\n  return model && model.years && model.years[0] && model.years[0][0] && model.years[0][0].date;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction MatrixOptions() {}\nif (false) {\n  /** @type {?} */\n  MatrixOptions.prototype.height;\n  /** @type {?} */\n  MatrixOptions.prototype.width;\n  /** @type {?} */\n  MatrixOptions.prototype.initialDate;\n  /** @type {?} */\n  MatrixOptions.prototype.shift;\n}\n/**\n * @template T\n * @param {?} options\n * @param {?} fn\n * @return {?}\n */\nfunction createMatrix(options, fn) {\n  /** @type {?} */\n  let prevValue = options.initialDate;\n  /** @type {?} */\n  const matrix = new Array(options.height);\n  for (let i = 0; i < options.height; i++) {\n    matrix[i] = new Array(options.width);\n    for (let j = 0; j < options.width; j++) {\n      matrix[i][j] = fn(prevValue);\n      prevValue = shiftDate(prevValue, options.shift);\n    }\n  }\n  return matrix;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} startingDate\n * @param {?} options\n * @return {?}\n */\nfunction calcDaysCalendar(startingDate, options) {\n  /** @type {?} */\n  const firstDay = getFirstDayOfMonth(startingDate);\n  /** @type {?} */\n  const initialDate = getStartingDayOfCalendar(firstDay, options);\n  /** @type {?} */\n  const matrixOptions = {\n    width: options.width,\n    height: options.height,\n    initialDate,\n    shift: {\n      day: 1\n    }\n  };\n  /** @type {?} */\n  const daysMatrix = createMatrix(matrixOptions,\n  /**\n  * @param {?} date\n  * @return {?}\n  */\n  date => date);\n  return {\n    daysMatrix,\n    month: firstDay\n  };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} daysCalendar\n * @param {?} formatOptions\n * @param {?} monthIndex\n * @return {?}\n */\nfunction formatDaysCalendar(daysCalendar, formatOptions, monthIndex) {\n  return {\n    month: daysCalendar.month,\n    monthTitle: formatDate(daysCalendar.month, formatOptions.monthTitle, formatOptions.locale),\n    yearTitle: formatDate(daysCalendar.month, formatOptions.yearTitle, formatOptions.locale),\n    weekNumbers: getWeekNumbers(daysCalendar.daysMatrix, formatOptions.weekNumbers, formatOptions.locale),\n    weekdays: getShiftedWeekdays(formatOptions.locale),\n    weeks: daysCalendar.daysMatrix.map(\n    /**\n    * @param {?} week\n    * @param {?} weekIndex\n    * @return {?}\n    */\n    (week, weekIndex) => ({\n      days: week.map(\n      /**\n      * @param {?} date\n      * @param {?} dayIndex\n      * @return {?}\n      */\n      (date, dayIndex) => ({\n        date,\n        label: formatDate(date, formatOptions.dayLabel, formatOptions.locale),\n        monthIndex,\n        weekIndex,\n        dayIndex\n      }))\n    }))\n  };\n}\n/**\n * @param {?} daysMatrix\n * @param {?} format\n * @param {?} locale\n * @return {?}\n */\nfunction getWeekNumbers(daysMatrix, format, locale) {\n  return daysMatrix.map(\n  /**\n  * @param {?} days\n  * @return {?}\n  */\n  days => days[0] ? formatDate(days[0], format, locale) : '');\n}\n/**\n * @param {?} locale\n * @return {?}\n */\nfunction getShiftedWeekdays(locale) {\n  /** @type {?} */\n  const _locale = getLocale(locale);\n  /** @type {?} */\n  const weekdays = /** @type {?} */_locale.weekdaysShort();\n  /** @type {?} */\n  const firstDayOfWeek = _locale.firstDayOfWeek();\n  return [...weekdays.slice(firstDayOfWeek), ...weekdays.slice(0, firstDayOfWeek)];\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction FlagDaysCalendarOptions() {}\nif (false) {\n  /** @type {?} */\n  FlagDaysCalendarOptions.prototype.isDisabled;\n  /** @type {?} */\n  FlagDaysCalendarOptions.prototype.minDate;\n  /** @type {?} */\n  FlagDaysCalendarOptions.prototype.maxDate;\n  /** @type {?} */\n  FlagDaysCalendarOptions.prototype.daysDisabled;\n  /** @type {?} */\n  FlagDaysCalendarOptions.prototype.datesDisabled;\n  /** @type {?} */\n  FlagDaysCalendarOptions.prototype.datesEnabled;\n  /** @type {?} */\n  FlagDaysCalendarOptions.prototype.hoveredDate;\n  /** @type {?} */\n  FlagDaysCalendarOptions.prototype.selectedDate;\n  /** @type {?} */\n  FlagDaysCalendarOptions.prototype.selectedRange;\n  /** @type {?} */\n  FlagDaysCalendarOptions.prototype.displayMonths;\n  /** @type {?} */\n  FlagDaysCalendarOptions.prototype.monthIndex;\n  /** @type {?} */\n  FlagDaysCalendarOptions.prototype.dateCustomClasses;\n}\n/**\n * @param {?} formattedMonth\n * @param {?} options\n * @return {?}\n */\nfunction flagDaysCalendar(formattedMonth, options) {\n  formattedMonth.weeks.forEach(\n  /**\n  * @param {?} week\n  * @return {?}\n  */\n  week => {\n    /* tslint:disable-next-line: cyclomatic-complexity */\n    week.days.forEach(\n    /**\n    * @param {?} day\n    * @param {?} dayIndex\n    * @return {?}\n    */\n    (day, dayIndex) => {\n      // datepicker\n      /** @type {?} */\n      const isOtherMonth = !isSameMonth(day.date, formattedMonth.month);\n      /** @type {?} */\n      const isHovered = !isOtherMonth && isSameDay(day.date, options.hoveredDate);\n      // date range picker\n      /** @type {?} */\n      const isSelectionStart = !isOtherMonth && options.selectedRange && isSameDay(day.date, options.selectedRange[0]);\n      /** @type {?} */\n      const isSelectionEnd = !isOtherMonth && options.selectedRange && isSameDay(day.date, options.selectedRange[1]);\n      /** @type {?} */\n      const isSelected = !isOtherMonth && isSameDay(day.date, options.selectedDate) || isSelectionStart || isSelectionEnd;\n      /** @type {?} */\n      const isInRange = !isOtherMonth && options.selectedRange && isDateInRange(day.date, options.selectedRange, options.hoveredDate);\n      /** @type {?} */\n      const isDisabled = options.isDisabled || isBefore(day.date, options.minDate, 'day') || isAfter(day.date, options.maxDate, 'day') || isDisabledDay(day.date, options.daysDisabled) || isDisabledDate(day.date, options.datesDisabled) || isEnabledDate(day.date, options.datesEnabled);\n      /** @type {?} */\n      const currentDate = new Date();\n      /** @type {?} */\n      const isToday = !isOtherMonth && isSameDay(day.date, currentDate);\n      /** @type {?} */\n      const customClasses = options.dateCustomClasses && options.dateCustomClasses.map(\n      /**\n      * @param {?} dcc\n      * @return {?}\n      */\n      dcc => isSameDay(day.date, dcc.date) ? dcc.classes : []).reduce(\n      /**\n      * @param {?} previousValue\n      * @param {?} currentValue\n      * @return {?}\n      */\n      (previousValue, currentValue) => previousValue.concat(currentValue), []).join(' ') || '';\n      // decide update or not\n      /** @type {?} */\n      const newDay = Object.assign({}, day, {\n        isOtherMonth,\n        isHovered,\n        isSelected,\n        isSelectionStart,\n        isSelectionEnd,\n        isInRange,\n        isDisabled,\n        isToday,\n        customClasses\n      });\n      if (day.isOtherMonth !== newDay.isOtherMonth || day.isHovered !== newDay.isHovered || day.isSelected !== newDay.isSelected || day.isSelectionStart !== newDay.isSelectionStart || day.isSelectionEnd !== newDay.isSelectionEnd || day.isDisabled !== newDay.isDisabled || day.isInRange !== newDay.isInRange || day.customClasses !== newDay.customClasses) {\n        week.days[dayIndex] = newDay;\n      }\n    });\n  });\n  // todo: add check for linked calendars\n  formattedMonth.hideLeftArrow = options.isDisabled || options.monthIndex > 0 && options.monthIndex !== options.displayMonths;\n  formattedMonth.hideRightArrow = options.isDisabled || options.monthIndex < options.displayMonths && options.monthIndex + 1 !== options.displayMonths;\n  formattedMonth.disableLeftArrow = isMonthDisabled(shiftDate(formattedMonth.month, {\n    month: -1\n  }), options.minDate, options.maxDate);\n  formattedMonth.disableRightArrow = isMonthDisabled(shiftDate(formattedMonth.month, {\n    month: 1\n  }), options.minDate, options.maxDate);\n  return formattedMonth;\n}\n/**\n * @param {?} date\n * @param {?} selectedRange\n * @param {?} hoveredDate\n * @return {?}\n */\nfunction isDateInRange(date, selectedRange, hoveredDate) {\n  if (!date || !selectedRange[0]) {\n    return false;\n  }\n  if (selectedRange[1]) {\n    return date > selectedRange[0] && date <= selectedRange[1];\n  }\n  if (hoveredDate) {\n    return date > selectedRange[0] && date <= hoveredDate;\n  }\n  return false;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} mode\n * @param {?=} minMode\n * @return {?}\n */\nfunction canSwitchMode(mode, minMode) {\n  return minMode ? mode >= minMode : true;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst height = 4;\n/** @type {?} */\nconst width = 3;\n/** @type {?} */\nconst shift = {\n  month: 1\n};\n/**\n * @param {?} viewDate\n * @param {?} formatOptions\n * @return {?}\n */\nfunction formatMonthsCalendar(viewDate, formatOptions) {\n  /** @type {?} */\n  const initialDate = startOf(viewDate, 'year');\n  /** @type {?} */\n  const matrixOptions = {\n    width,\n    height,\n    initialDate,\n    shift\n  };\n  /** @type {?} */\n  const monthMatrix = createMatrix(matrixOptions,\n  /**\n  * @param {?} date\n  * @return {?}\n  */\n  date => ({\n    date,\n    label: formatDate(date, formatOptions.monthLabel, formatOptions.locale)\n  }));\n  return {\n    months: monthMatrix,\n    monthTitle: '',\n    yearTitle: formatDate(viewDate, formatOptions.yearTitle, formatOptions.locale)\n  };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction FlagMonthCalendarOptions() {}\nif (false) {\n  /** @type {?} */\n  FlagMonthCalendarOptions.prototype.isDisabled;\n  /** @type {?} */\n  FlagMonthCalendarOptions.prototype.minDate;\n  /** @type {?} */\n  FlagMonthCalendarOptions.prototype.maxDate;\n  /** @type {?} */\n  FlagMonthCalendarOptions.prototype.hoveredMonth;\n  /** @type {?} */\n  FlagMonthCalendarOptions.prototype.selectedDate;\n  /** @type {?} */\n  FlagMonthCalendarOptions.prototype.displayMonths;\n  /** @type {?} */\n  FlagMonthCalendarOptions.prototype.monthIndex;\n}\n/**\n * @param {?} monthCalendar\n * @param {?} options\n * @return {?}\n */\nfunction flagMonthsCalendar(monthCalendar, options) {\n  monthCalendar.months.forEach(\n  /**\n  * @param {?} months\n  * @param {?} rowIndex\n  * @return {?}\n  */\n  (months, rowIndex) => {\n    months.forEach(\n    /**\n    * @param {?} month\n    * @param {?} monthIndex\n    * @return {?}\n    */\n    (month, monthIndex) => {\n      /** @type {?} */\n      const isHovered = isSameMonth(month.date, options.hoveredMonth);\n      /** @type {?} */\n      const isDisabled = options.isDisabled || isMonthDisabled(month.date, options.minDate, options.maxDate);\n      /** @type {?} */\n      const isSelected = isSameMonth(month.date, options.selectedDate);\n      /** @type {?} */\n      const newMonth = Object.assign( /*{},*/month, {\n        isHovered,\n        isDisabled,\n        isSelected\n      });\n      if (month.isHovered !== newMonth.isHovered || month.isDisabled !== newMonth.isDisabled || month.isSelected !== newMonth.isSelected) {\n        monthCalendar.months[rowIndex][monthIndex] = newMonth;\n      }\n    });\n  });\n  // todo: add check for linked calendars\n  monthCalendar.hideLeftArrow = options.monthIndex > 0 && options.monthIndex !== options.displayMonths;\n  monthCalendar.hideRightArrow = options.monthIndex < options.displayMonths && options.monthIndex + 1 !== options.displayMonths;\n  monthCalendar.disableLeftArrow = isYearDisabled(shiftDate(monthCalendar.months[0][0].date, {\n    year: -1\n  }), options.minDate, options.maxDate);\n  monthCalendar.disableRightArrow = isYearDisabled(shiftDate(monthCalendar.months[0][0].date, {\n    year: 1\n  }), options.minDate, options.maxDate);\n  return monthCalendar;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst height$1 = 4;\n/** @type {?} */\nconst width$1 = 4;\n/** @type {?} */\nconst yearsPerCalendar = height$1 * width$1;\n/** @type {?} */\nconst initialYearShift = (Math.floor(yearsPerCalendar / 2) - 1) * -1;\n/** @type {?} */\nconst shift$1 = {\n  year: 1\n};\n/**\n * @param {?} viewDate\n * @param {?} formatOptions\n * @param {?=} previousInitialDate\n * @return {?}\n */\nfunction formatYearsCalendar(viewDate, formatOptions, previousInitialDate) {\n  /** @type {?} */\n  const initialDate = calculateInitialDate(viewDate, previousInitialDate);\n  /** @type {?} */\n  const matrixOptions = {\n    width: width$1,\n    height: height$1,\n    initialDate,\n    shift: shift$1\n  };\n  /** @type {?} */\n  const yearsMatrix = createMatrix(matrixOptions,\n  /**\n  * @param {?} date\n  * @return {?}\n  */\n  date => ({\n    date,\n    label: formatDate(date, formatOptions.yearLabel, formatOptions.locale)\n  }));\n  /** @type {?} */\n  const yearTitle = formatYearRangeTitle(yearsMatrix, formatOptions);\n  return {\n    years: yearsMatrix,\n    monthTitle: '',\n    yearTitle\n  };\n}\n/**\n * @param {?} viewDate\n * @param {?=} previousInitialDate\n * @return {?}\n */\nfunction calculateInitialDate(viewDate, previousInitialDate) {\n  if (previousInitialDate && viewDate.getFullYear() >= previousInitialDate.getFullYear() && viewDate.getFullYear() < previousInitialDate.getFullYear() + yearsPerCalendar) {\n    return previousInitialDate;\n  }\n  return shiftDate(viewDate, {\n    year: initialYearShift\n  });\n}\n/**\n * @param {?} yearsMatrix\n * @param {?} formatOptions\n * @return {?}\n */\nfunction formatYearRangeTitle(yearsMatrix, formatOptions) {\n  /** @type {?} */\n  const from = formatDate(yearsMatrix[0][0].date, formatOptions.yearTitle, formatOptions.locale);\n  /** @type {?} */\n  const to = formatDate(yearsMatrix[height$1 - 1][width$1 - 1].date, formatOptions.yearTitle, formatOptions.locale);\n  return `${from} - ${to}`;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction FlagYearsCalendarOptions() {}\nif (false) {\n  /** @type {?} */\n  FlagYearsCalendarOptions.prototype.isDisabled;\n  /** @type {?} */\n  FlagYearsCalendarOptions.prototype.minDate;\n  /** @type {?} */\n  FlagYearsCalendarOptions.prototype.maxDate;\n  /** @type {?} */\n  FlagYearsCalendarOptions.prototype.hoveredYear;\n  /** @type {?} */\n  FlagYearsCalendarOptions.prototype.selectedDate;\n  /** @type {?} */\n  FlagYearsCalendarOptions.prototype.displayMonths;\n  /** @type {?} */\n  FlagYearsCalendarOptions.prototype.yearIndex;\n}\n/**\n * @param {?} yearsCalendar\n * @param {?} options\n * @return {?}\n */\nfunction flagYearsCalendar(yearsCalendar, options) {\n  yearsCalendar.years.forEach(\n  /**\n  * @param {?} years\n  * @param {?} rowIndex\n  * @return {?}\n  */\n  (years, rowIndex) => {\n    years.forEach(\n    /**\n    * @param {?} year\n    * @param {?} yearIndex\n    * @return {?}\n    */\n    (year, yearIndex) => {\n      /** @type {?} */\n      const isHovered = isSameYear(year.date, options.hoveredYear);\n      /** @type {?} */\n      const isDisabled = options.isDisabled || isYearDisabled(year.date, options.minDate, options.maxDate);\n      /** @type {?} */\n      const isSelected = isSameYear(year.date, options.selectedDate);\n      /** @type {?} */\n      const newMonth = Object.assign( /*{},*/year, {\n        isHovered,\n        isDisabled,\n        isSelected\n      });\n      if (year.isHovered !== newMonth.isHovered || year.isDisabled !== newMonth.isDisabled || year.isSelected !== newMonth.isSelected) {\n        yearsCalendar.years[rowIndex][yearIndex] = newMonth;\n      }\n    });\n  });\n  // todo: add check for linked calendars\n  yearsCalendar.hideLeftArrow = options.yearIndex > 0 && options.yearIndex !== options.displayMonths;\n  yearsCalendar.hideRightArrow = options.yearIndex < options.displayMonths && options.yearIndex + 1 !== options.displayMonths;\n  yearsCalendar.disableLeftArrow = isYearDisabled(shiftDate(yearsCalendar.years[0][0].date, {\n    year: -1\n  }), options.minDate, options.maxDate);\n  /** @type {?} */\n  const i = yearsCalendar.years.length - 1;\n  /** @type {?} */\n  const j = yearsCalendar.years[i].length - 1;\n  yearsCalendar.disableRightArrow = isYearDisabled(shiftDate(yearsCalendar.years[i][j].date, {\n    year: 1\n  }), options.minDate, options.maxDate);\n  return yearsCalendar;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/* tslint:disable-next-line: cyclomatic-complexity */\n/**\n * @param {?=} state\n * @param {?=} action\n * @return {?}\n */\nfunction bsDatepickerReducer(state = initialDatepickerState, action) {\n  switch (action.type) {\n    case BsDatepickerActions.CALCULATE:\n      {\n        return calculateReducer(state);\n      }\n    case BsDatepickerActions.FORMAT:\n      {\n        return formatReducer(state, action);\n      }\n    case BsDatepickerActions.FLAG:\n      {\n        return flagReducer(state, action);\n      }\n    case BsDatepickerActions.NAVIGATE_OFFSET:\n      {\n        return navigateOffsetReducer(state, action);\n      }\n    case BsDatepickerActions.NAVIGATE_TO:\n      {\n        /** @type {?} */\n        const payload = action.payload;\n        /** @type {?} */\n        const date = setFullDate(state.view.date, payload.unit);\n        /** @type {?} */\n        let newState;\n        /** @type {?} */\n        let mode;\n        if (canSwitchMode(payload.viewMode, state.minMode)) {\n          mode = payload.viewMode;\n          newState = {\n            view: {\n              date,\n              mode\n            }\n          };\n        } else {\n          mode = state.view.mode;\n          newState = {\n            selectedDate: date,\n            view: {\n              date,\n              mode\n            }\n          };\n        }\n        return Object.assign({}, state, newState);\n      }\n    case BsDatepickerActions.CHANGE_VIEWMODE:\n      {\n        if (!canSwitchMode(action.payload, state.minMode)) {\n          return state;\n        }\n        /** @type {?} */\n        const date = state.view.date;\n        /** @type {?} */\n        const mode = action.payload;\n        /** @type {?} */\n        const newState = {\n          view: {\n            date,\n            mode\n          }\n        };\n        return Object.assign({}, state, newState);\n      }\n    case BsDatepickerActions.HOVER:\n      {\n        return Object.assign({}, state, {\n          hoveredDate: action.payload\n        });\n      }\n    case BsDatepickerActions.SELECT:\n      {\n        /** @type {?} */\n        const newState = {\n          selectedDate: action.payload,\n          view: state.view\n        };\n        /** @type {?} */\n        const mode = state.view.mode;\n        /** @type {?} */\n        const _date = action.payload || state.view.date;\n        /** @type {?} */\n        const date = getViewDate(_date, state.minDate, state.maxDate);\n        newState.view = {\n          mode,\n          date\n        };\n        return Object.assign({}, state, newState);\n      }\n    case BsDatepickerActions.SET_OPTIONS:\n      {\n        /** @type {?} */\n        const newState = action.payload;\n        // preserve view mode\n        /** @type {?} */\n        const mode = newState.minMode ? newState.minMode : state.view.mode;\n        /** @type {?} */\n        const _viewDate = isDateValid(newState.value) && newState.value || isArray(newState.value) && isDateValid(newState.value[0]) && newState.value[0] || state.view.date;\n        /** @type {?} */\n        const date = getViewDate(_viewDate, newState.minDate, newState.maxDate);\n        newState.view = {\n          mode,\n          date\n        };\n        // update selected value\n        if (newState.value) {\n          // if new value is array we work with date range\n          if (isArray(newState.value)) {\n            newState.selectedRange = newState.value;\n          }\n          // if new value is a date -> datepicker\n          if (newState.value instanceof Date) {\n            newState.selectedDate = newState.value;\n          }\n          // provided value is not supported :)\n          // need to report it somehow\n        }\n\n        return Object.assign({}, state, newState);\n      }\n    // date range picker\n    case BsDatepickerActions.SELECT_RANGE:\n      {\n        /** @type {?} */\n        const newState = {\n          selectedRange: action.payload,\n          view: state.view\n        };\n        /** @type {?} */\n        const mode = state.view.mode;\n        /** @type {?} */\n        const _date = action.payload && action.payload[0] || state.view.date;\n        /** @type {?} */\n        const date = getViewDate(_date, state.minDate, state.maxDate);\n        newState.view = {\n          mode,\n          date\n        };\n        return Object.assign({}, state, newState);\n      }\n    case BsDatepickerActions.SET_MIN_DATE:\n      {\n        return Object.assign({}, state, {\n          minDate: action.payload\n        });\n      }\n    case BsDatepickerActions.SET_MAX_DATE:\n      {\n        return Object.assign({}, state, {\n          maxDate: action.payload\n        });\n      }\n    case BsDatepickerActions.SET_IS_DISABLED:\n      {\n        return Object.assign({}, state, {\n          isDisabled: action.payload\n        });\n      }\n    case BsDatepickerActions.SET_DATE_CUSTOM_CLASSES:\n      {\n        return Object.assign({}, state, {\n          dateCustomClasses: action.payload\n        });\n      }\n    default:\n      return state;\n  }\n}\n/**\n * @param {?} state\n * @return {?}\n */\nfunction calculateReducer(state) {\n  // how many calendars\n  /** @type {?} */\n  const displayMonths = state.displayOneMonthRange && isDisplayOneMonth(state.view.date, state.minDate, state.maxDate) ? 1 : state.displayMonths;\n  // use selected date on initial rendering if set\n  /** @type {?} */\n  let viewDate = state.view.date;\n  if (state.view.mode === 'day') {\n    if (state.showPreviousMonth && state.selectedRange.length === 0) {\n      viewDate = shiftDate(viewDate, {\n        month: -1\n      });\n    }\n    state.monthViewOptions.firstDayOfWeek = getLocale(state.locale).firstDayOfWeek();\n    /** @type {?} */\n    const monthsModel = new Array(displayMonths);\n    for (let monthIndex = 0; monthIndex < displayMonths; monthIndex++) {\n      // todo: for unlinked calendars it will be harder\n      monthsModel[monthIndex] = calcDaysCalendar(viewDate, state.monthViewOptions);\n      viewDate = shiftDate(viewDate, {\n        month: 1\n      });\n    }\n    return Object.assign({}, state, {\n      monthsModel\n    });\n  }\n  if (state.view.mode === 'month') {\n    /** @type {?} */\n    const monthsCalendar = new Array(displayMonths);\n    for (let calendarIndex = 0; calendarIndex < displayMonths; calendarIndex++) {\n      // todo: for unlinked calendars it will be harder\n      monthsCalendar[calendarIndex] = formatMonthsCalendar(viewDate, getFormatOptions(state));\n      viewDate = shiftDate(viewDate, {\n        year: 1\n      });\n    }\n    return Object.assign({}, state, {\n      monthsCalendar\n    });\n  }\n  if (state.view.mode === 'year') {\n    /** @type {?} */\n    const yearsCalendarModel = new Array(displayMonths);\n    for (let calendarIndex = 0; calendarIndex < displayMonths; calendarIndex++) {\n      // todo: for unlinked calendars it will be harder\n      yearsCalendarModel[calendarIndex] = formatYearsCalendar(viewDate, getFormatOptions(state), state.minMode === 'year' ? getYearsCalendarInitialDate(state, calendarIndex) : undefined);\n      viewDate = shiftDate(viewDate, {\n        year: yearsPerCalendar\n      });\n    }\n    return Object.assign({}, state, {\n      yearsCalendarModel\n    });\n  }\n  return state;\n}\n/**\n * @param {?} state\n * @param {?} action\n * @return {?}\n */\nfunction formatReducer(state, action) {\n  if (state.view.mode === 'day') {\n    /** @type {?} */\n    const formattedMonths = state.monthsModel.map(\n    /**\n    * @param {?} month\n    * @param {?} monthIndex\n    * @return {?}\n    */\n    (month, monthIndex) => formatDaysCalendar(month, getFormatOptions(state), monthIndex));\n    return Object.assign({}, state, {\n      formattedMonths\n    });\n  }\n  // how many calendars\n  /** @type {?} */\n  const displayMonths = state.displayMonths;\n  // check initial rendering\n  // use selected date on initial rendering if set\n  /** @type {?} */\n  let viewDate = state.view.date;\n  if (state.view.mode === 'month') {\n    /** @type {?} */\n    const monthsCalendar = new Array(displayMonths);\n    for (let calendarIndex = 0; calendarIndex < displayMonths; calendarIndex++) {\n      // todo: for unlinked calendars it will be harder\n      monthsCalendar[calendarIndex] = formatMonthsCalendar(viewDate, getFormatOptions(state));\n      viewDate = shiftDate(viewDate, {\n        year: 1\n      });\n    }\n    return Object.assign({}, state, {\n      monthsCalendar\n    });\n  }\n  if (state.view.mode === 'year') {\n    /** @type {?} */\n    const yearsCalendarModel = new Array(displayMonths);\n    for (let calendarIndex = 0; calendarIndex < displayMonths; calendarIndex++) {\n      // todo: for unlinked calendars it will be harder\n      yearsCalendarModel[calendarIndex] = formatYearsCalendar(viewDate, getFormatOptions(state));\n      viewDate = shiftDate(viewDate, {\n        year: 16\n      });\n    }\n    return Object.assign({}, state, {\n      yearsCalendarModel\n    });\n  }\n  return state;\n}\n/**\n * @param {?} state\n * @param {?} action\n * @return {?}\n */\nfunction flagReducer(state, action) {\n  /** @type {?} */\n  const displayMonths = isDisplayOneMonth(state.view.date, state.minDate, state.maxDate) ? 1 : state.displayMonths;\n  if (state.view.mode === 'day') {\n    /** @type {?} */\n    const flaggedMonths = state.formattedMonths.map(\n    /**\n    * @param {?} formattedMonth\n    * @param {?} monthIndex\n    * @return {?}\n    */\n    (formattedMonth, monthIndex) => flagDaysCalendar(formattedMonth, {\n      isDisabled: state.isDisabled,\n      minDate: state.minDate,\n      maxDate: state.maxDate,\n      daysDisabled: state.daysDisabled,\n      datesDisabled: state.datesDisabled,\n      datesEnabled: state.datesEnabled,\n      hoveredDate: state.hoveredDate,\n      selectedDate: state.selectedDate,\n      selectedRange: state.selectedRange,\n      displayMonths,\n      dateCustomClasses: state.dateCustomClasses,\n      monthIndex\n    }));\n    return Object.assign({}, state, {\n      flaggedMonths\n    });\n  }\n  if (state.view.mode === 'month') {\n    /** @type {?} */\n    const flaggedMonthsCalendar = state.monthsCalendar.map(\n    /**\n    * @param {?} formattedMonth\n    * @param {?} monthIndex\n    * @return {?}\n    */\n    (formattedMonth, monthIndex) => flagMonthsCalendar(formattedMonth, {\n      isDisabled: state.isDisabled,\n      minDate: state.minDate,\n      maxDate: state.maxDate,\n      hoveredMonth: state.hoveredMonth,\n      selectedDate: state.selectedDate,\n      displayMonths,\n      monthIndex\n    }));\n    return Object.assign({}, state, {\n      flaggedMonthsCalendar\n    });\n  }\n  if (state.view.mode === 'year') {\n    /** @type {?} */\n    const yearsCalendarFlagged = state.yearsCalendarModel.map(\n    /**\n    * @param {?} formattedMonth\n    * @param {?} yearIndex\n    * @return {?}\n    */\n    (formattedMonth, yearIndex) => flagYearsCalendar(formattedMonth, {\n      isDisabled: state.isDisabled,\n      minDate: state.minDate,\n      maxDate: state.maxDate,\n      hoveredYear: state.hoveredYear,\n      selectedDate: state.selectedDate,\n      displayMonths,\n      yearIndex\n    }));\n    return Object.assign({}, state, {\n      yearsCalendarFlagged\n    });\n  }\n  return state;\n}\n/**\n * @param {?} state\n * @param {?} action\n * @return {?}\n */\nfunction navigateOffsetReducer(state, action) {\n  /** @type {?} */\n  const newState = {\n    view: {\n      mode: state.view.mode,\n      date: shiftViewDate(state, action)\n    }\n  };\n  return Object.assign({}, state, newState);\n}\n/**\n * @param {?} state\n * @param {?} action\n * @return {?}\n */\nfunction shiftViewDate(state, action) {\n  if (state.view.mode === 'year' && state.minMode === 'year') {\n    /** @type {?} */\n    const initialDate = getYearsCalendarInitialDate(state, 0);\n    /** @type {?} */\n    const middleDate = shiftDate(initialDate, {\n      year: -initialYearShift\n    });\n    return shiftDate(middleDate, action.payload);\n  }\n  return shiftDate(startOf(state.view.date, 'month'), action.payload);\n}\n/**\n * @param {?} state\n * @return {?}\n */\nfunction getFormatOptions(state) {\n  return {\n    locale: state.locale,\n    monthTitle: state.monthTitle,\n    yearTitle: state.yearTitle,\n    dayLabel: state.dayLabel,\n    monthLabel: state.monthLabel,\n    yearLabel: state.yearLabel,\n    weekNumbers: state.weekNumbers\n  };\n}\n/**\n * if view date is provided (bsValue|ngModel) it should be shown\n * if view date is not provider:\n * if minDate>currentDate (default view value), show minDate\n * if maxDate<currentDate(default view value) show maxDate\n * @param {?} viewDate\n * @param {?} minDate\n * @param {?} maxDate\n * @return {?}\n */\nfunction getViewDate(viewDate, minDate, maxDate) {\n  /** @type {?} */\n  const _date = Array.isArray(viewDate) ? viewDate[0] : viewDate;\n  if (minDate && isAfter(minDate, _date, 'day')) {\n    return minDate;\n  }\n  if (maxDate && isBefore(maxDate, _date, 'day')) {\n    return maxDate;\n  }\n  return _date;\n}\n/**\n * @param {?} viewDate\n * @param {?} minDate\n * @param {?} maxDate\n * @return {?}\n */\nfunction isDisplayOneMonth(viewDate, minDate, maxDate) {\n  if (maxDate && isSame(maxDate, viewDate, 'day')) {\n    return true;\n  }\n  if (minDate && maxDate && minDate.getMonth() === maxDate.getMonth()) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass BsDatepickerStore extends MiniStore {\n  constructor() {\n    /** @type {?} */\n    const _dispatcher = new BehaviorSubject({\n      type: '[datepicker] dispatcher init'\n    });\n    /** @type {?} */\n    const state = new MiniState(initialDatepickerState, _dispatcher, bsDatepickerReducer);\n    super(_dispatcher, bsDatepickerReducer, state);\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst DATEPICKER_ANIMATION_TIMING = '220ms cubic-bezier(0, 0, 0.2, 1)';\n/** @type {?} */\nconst datepickerAnimation = trigger('datepickerAnimation', [state('animated-down', style({\n  height: '*',\n  overflow: 'hidden'\n})), transition('* => animated-down', [style({\n  height: 0,\n  overflow: 'hidden'\n}), animate(DATEPICKER_ANIMATION_TIMING)]), state('animated-up', style({\n  height: '*',\n  overflow: 'hidden'\n})), transition('* => animated-up', [style({\n  height: '*',\n  overflow: 'hidden'\n}), animate(DATEPICKER_ANIMATION_TIMING)]), transition('* => unanimated', animate('0s'))]);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass BsDatepickerContainerComponent extends BsDatepickerAbstractComponent {\n  /**\n   * @param {?} _renderer\n   * @param {?} _config\n   * @param {?} _store\n   * @param {?} _element\n   * @param {?} _actions\n   * @param {?} _effects\n   * @param {?} _positionService\n   */\n  constructor(_renderer, _config, _store, _element, _actions, _effects, _positionService) {\n    super();\n    this._config = _config;\n    this._store = _store;\n    this._element = _element;\n    this._actions = _actions;\n    this._positionService = _positionService;\n    this.valueChange = new EventEmitter();\n    this.animationState = 'void';\n    this._subs = [];\n    this._effects = _effects;\n    _renderer.setStyle(_element.nativeElement, 'display', 'block');\n    _renderer.setStyle(_element.nativeElement, 'position', 'absolute');\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set value(value) {\n    this._effects.setValue(value);\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    this._positionService.setOptions({\n      modifiers: {\n        flip: {\n          enabled: this._config.adaptivePosition\n        }\n      },\n      allowedPositions: ['top', 'bottom']\n    });\n    this._positionService.event$.pipe(take(1)).subscribe(\n    /**\n    * @return {?}\n    */\n    () => {\n      this._positionService.disable();\n      if (this._config.isAnimated) {\n        this.animationState = this.isTopPosition ? 'animated-up' : 'animated-down';\n        return;\n      }\n      this.animationState = 'unanimated';\n    });\n    this.isOtherMonthsActive = this._config.selectFromOtherMonth;\n    this.containerClass = this._config.containerClass;\n    this._effects.init(this._store)\n    // intial state options\n    .setOptions(this._config)\n    // data binding view --> model\n    .setBindings(this)\n    // set event handlers\n    .setEventHandlers(this).registerDatepickerSideEffects();\n    // todo: move it somewhere else\n    // on selected date change\n    this._subs.push(this._store\n    /* tslint:disable-next-line: no-any */.select(\n    /**\n    * @param {?} state\n    * @return {?}\n    */\n    state => state.selectedDate)\n    /* tslint:disable-next-line: no-any */.subscribe(\n    /**\n    * @param {?} date\n    * @return {?}\n    */\n    date => this.valueChange.emit(date)));\n  }\n  /**\n   * @return {?}\n   */\n  get isTopPosition() {\n    return this._element.nativeElement.classList.contains('top');\n  }\n  /**\n   * @return {?}\n   */\n  positionServiceEnable() {\n    this._positionService.enable();\n  }\n  /**\n   * @param {?} day\n   * @return {?}\n   */\n  daySelectHandler(day) {\n    if (!day) {\n      return;\n    }\n    /** @type {?} */\n    const isDisabled = this.isOtherMonthsActive ? day.isDisabled : day.isOtherMonth || day.isDisabled;\n    if (isDisabled) {\n      return;\n    }\n    this._store.dispatch(this._actions.select(day.date));\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    for (const sub of this._subs) {\n      sub.unsubscribe();\n    }\n    this._effects.destroy();\n  }\n}\n\n/** @nocollapse */\n\nif (false) {\n  /** @type {?} */\n  BsDatepickerContainerComponent.prototype.valueChange;\n  /** @type {?} */\n  BsDatepickerContainerComponent.prototype.animationState;\n  /** @type {?} */\n  BsDatepickerContainerComponent.prototype._subs;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDatepickerContainerComponent.prototype._config;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDatepickerContainerComponent.prototype._store;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDatepickerContainerComponent.prototype._element;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDatepickerContainerComponent.prototype._actions;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDatepickerContainerComponent.prototype._positionService;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass BsDatepickerDirective {\n  /**\n   * @param {?} _config\n   * @param {?} _elementRef\n   * @param {?} _renderer\n   * @param {?} _viewContainerRef\n   * @param {?} cis\n   */\n  constructor(_config, _elementRef, _renderer, _viewContainerRef, cis) {\n    this._config = _config;\n    this._elementRef = _elementRef;\n    this._renderer = _renderer;\n    /**\n     * Placement of a datepicker. Accepts: \"top\", \"bottom\", \"left\", \"right\"\n     */\n    this.placement = 'bottom';\n    /**\n     * Specifies events that should trigger. Supports a space separated list of\n     * event names.\n     */\n    this.triggers = 'click';\n    /**\n     * Close datepicker on outside click\n     */\n    this.outsideClick = true;\n    /**\n     * A selector specifying the element the datepicker should be appended to.\n     */\n    this.container = 'body';\n    this.outsideEsc = true;\n    /**\n     * Emits when datepicker value has been changed\n     */\n    this.bsValueChange = new EventEmitter();\n    this._subs = [];\n    // todo: assign only subset of fields\n    Object.assign(this, this._config);\n    this._datepicker = cis.createLoader(_elementRef, _viewContainerRef, _renderer);\n    this.onShown = this._datepicker.onShown;\n    this.onHidden = this._datepicker.onHidden;\n    this.isOpen$ = new BehaviorSubject(this.isOpen);\n  }\n  /**\n   * Returns whether or not the datepicker is currently being shown\n   * @return {?}\n   */\n  get isOpen() {\n    return this._datepicker.isShown;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set isOpen(value) {\n    this.isOpen$.next(value);\n  }\n  /**\n   * Initial value of datepicker\n   * @param {?} value\n   * @return {?}\n   */\n  set bsValue(value) {\n    if (this._bsValue && value && this._bsValue.getTime() === value.getTime()) {\n      return;\n    }\n    this._bsValue = value;\n    this.bsValueChange.emit(value);\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    this.isDestroy$ = new Subject();\n    this._datepicker.listen({\n      outsideClick: this.outsideClick,\n      outsideEsc: this.outsideEsc,\n      triggers: this.triggers,\n      show:\n      /**\n      * @return {?}\n      */\n      () => this.show()\n    });\n    this.setConfig();\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n  ngOnChanges(changes) {\n    if (!this._datepickerRef || !this._datepickerRef.instance) {\n      return;\n    }\n    if (changes.minDate) {\n      this._datepickerRef.instance.minDate = this.minDate;\n    }\n    if (changes.maxDate) {\n      this._datepickerRef.instance.maxDate = this.maxDate;\n    }\n    if (changes.daysDisabled) {\n      this._datepickerRef.instance.daysDisabled = this.daysDisabled;\n    }\n    if (changes.datesDisabled) {\n      this._datepickerRef.instance.datesDisabled = this.datesDisabled;\n    }\n    if (changes.datesEnabled) {\n      this._datepickerRef.instance.datesEnabled = this.datesEnabled;\n    }\n    if (changes.isDisabled) {\n      this._datepickerRef.instance.isDisabled = this.isDisabled;\n    }\n    if (changes.dateCustomClasses) {\n      this._datepickerRef.instance.dateCustomClasses = this.dateCustomClasses;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterViewInit() {\n    this.isOpen$.pipe(filter(\n    /**\n    * @param {?} isOpen\n    * @return {?}\n    */\n    isOpen => isOpen !== this.isOpen), takeUntil(this.isDestroy$)).subscribe(\n    /**\n    * @return {?}\n    */\n    () => this.toggle());\n  }\n  /**\n   * Opens an element’s datepicker. This is considered a “manual” triggering of\n   * the datepicker.\n   * @return {?}\n   */\n  show() {\n    if (this._datepicker.isShown) {\n      return;\n    }\n    this.setConfig();\n    this._datepickerRef = this._datepicker.provide({\n      provide: BsDatepickerConfig,\n      useValue: this._config\n    }).attach(BsDatepickerContainerComponent).to(this.container).position({\n      attachment: this.placement\n    }).show({\n      placement: this.placement\n    });\n    // if date changes from external source (model -> view)\n    this._subs.push(this.bsValueChange.subscribe(\n    /**\n    * @param {?} value\n    * @return {?}\n    */\n    value => {\n      this._datepickerRef.instance.value = value;\n    }));\n    // if date changes from picker (view -> model)\n    this._subs.push(this._datepickerRef.instance.valueChange.subscribe(\n    /**\n    * @param {?} value\n    * @return {?}\n    */\n    value => {\n      this.bsValue = value;\n      this.hide();\n    }));\n  }\n  /**\n   * Closes an element’s datepicker. This is considered a “manual” triggering of\n   * the datepicker.\n   * @return {?}\n   */\n  hide() {\n    if (this.isOpen) {\n      this._datepicker.hide();\n    }\n    for (const sub of this._subs) {\n      sub.unsubscribe();\n    }\n    if (this._config.returnFocusToInput) {\n      this._renderer.selectRootElement(this._elementRef.nativeElement).focus();\n    }\n  }\n  /**\n   * Toggles an element’s datepicker. This is considered a “manual” triggering\n   * of the datepicker.\n   * @return {?}\n   */\n  toggle() {\n    if (this.isOpen) {\n      return this.hide();\n    }\n    this.show();\n  }\n  /**\n   * Set config for datepicker\n   * @return {?}\n   */\n  setConfig() {\n    this._config = Object.assign({}, this._config, this.bsConfig, {\n      value: this._bsValue,\n      isDisabled: this.isDisabled,\n      minDate: this.minDate || this.bsConfig && this.bsConfig.minDate,\n      maxDate: this.maxDate || this.bsConfig && this.bsConfig.maxDate,\n      daysDisabled: this.daysDisabled || this.bsConfig && this.bsConfig.daysDisabled,\n      dateCustomClasses: this.dateCustomClasses || this.bsConfig && this.bsConfig.dateCustomClasses,\n      datesDisabled: this.datesDisabled || this.bsConfig && this.bsConfig.datesDisabled,\n      datesEnabled: this.datesEnabled || this.bsConfig && this.bsConfig.datesEnabled,\n      minMode: this.minMode || this.bsConfig && this.bsConfig.minMode\n    });\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._datepicker.dispose();\n    this.isOpen$.next(false);\n    if (this.isDestroy$) {\n      this.isDestroy$.next();\n      this.isDestroy$.complete();\n    }\n  }\n}\n\n/** @nocollapse */\n\nif (false) {\n  /**\n   * Placement of a datepicker. Accepts: \"top\", \"bottom\", \"left\", \"right\"\n   * @type {?}\n   */\n  BsDatepickerDirective.prototype.placement;\n  /**\n   * Specifies events that should trigger. Supports a space separated list of\n   * event names.\n   * @type {?}\n   */\n  BsDatepickerDirective.prototype.triggers;\n  /**\n   * Close datepicker on outside click\n   * @type {?}\n   */\n  BsDatepickerDirective.prototype.outsideClick;\n  /**\n   * A selector specifying the element the datepicker should be appended to.\n   * @type {?}\n   */\n  BsDatepickerDirective.prototype.container;\n  /** @type {?} */\n  BsDatepickerDirective.prototype.outsideEsc;\n  /**\n   * Emits an event when the datepicker is shown\n   * @type {?}\n   */\n  BsDatepickerDirective.prototype.onShown;\n  /**\n   * Emits an event when the datepicker is hidden\n   * @type {?}\n   */\n  BsDatepickerDirective.prototype.onHidden;\n  /** @type {?} */\n  BsDatepickerDirective.prototype._bsValue;\n  /** @type {?} */\n  BsDatepickerDirective.prototype.isOpen$;\n  /** @type {?} */\n  BsDatepickerDirective.prototype.isDestroy$;\n  /**\n   * Config object for datepicker\n   * @type {?}\n   */\n  BsDatepickerDirective.prototype.bsConfig;\n  /**\n   * Indicates whether datepicker's content is enabled or not\n   * @type {?}\n   */\n  BsDatepickerDirective.prototype.isDisabled;\n  /**\n   * Minimum date which is available for selection\n   * @type {?}\n   */\n  BsDatepickerDirective.prototype.minDate;\n  /**\n   * Maximum date which is available for selection\n   * @type {?}\n   */\n  BsDatepickerDirective.prototype.maxDate;\n  /**\n   * Minimum view mode : day, month, or year\n   * @type {?}\n   */\n  BsDatepickerDirective.prototype.minMode;\n  /**\n   * Disable Certain days in the week\n   * @type {?}\n   */\n  BsDatepickerDirective.prototype.daysDisabled;\n  /**\n   * Disable specific dates\n   * @type {?}\n   */\n  BsDatepickerDirective.prototype.datesDisabled;\n  /**\n   * Enable specific dates\n   * @type {?}\n   */\n  BsDatepickerDirective.prototype.datesEnabled;\n  /**\n   * Date custom classes\n   * @type {?}\n   */\n  BsDatepickerDirective.prototype.dateCustomClasses;\n  /**\n   * Emits when datepicker value has been changed\n   * @type {?}\n   */\n  BsDatepickerDirective.prototype.bsValueChange;\n  /**\n   * @type {?}\n   * @protected\n   */\n  BsDatepickerDirective.prototype._subs;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDatepickerDirective.prototype._datepicker;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDatepickerDirective.prototype._datepickerRef;\n  /** @type {?} */\n  BsDatepickerDirective.prototype._config;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDatepickerDirective.prototype._elementRef;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDatepickerDirective.prototype._renderer;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass BsDatepickerInlineConfig extends BsDatepickerConfig {}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass BsDatepickerInlineContainerComponent extends BsDatepickerContainerComponent {\n  /**\n   * @param {?} _renderer\n   * @param {?} _config\n   * @param {?} _store\n   * @param {?} _element\n   * @param {?} _actions\n   * @param {?} _effects\n   * @param {?} _positioningService\n   */\n  constructor(_renderer, _config, _store, _element, _actions, _effects, _positioningService) {\n    super(_renderer, _config, _store, _element, _actions, _effects, _positioningService);\n    _renderer.setStyle(_element.nativeElement, 'display', 'inline-block');\n    _renderer.setStyle(_element.nativeElement, 'position', 'static');\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass BsDatepickerInlineDirective {\n  /**\n   * @param {?} _config\n   * @param {?} _elementRef\n   * @param {?} _renderer\n   * @param {?} _viewContainerRef\n   * @param {?} cis\n   */\n  constructor(_config, _elementRef, _renderer, _viewContainerRef, cis) {\n    this._config = _config;\n    this._elementRef = _elementRef;\n    /**\n     * Emits when datepicker value has been changed\n     */\n    this.bsValueChange = new EventEmitter();\n    this._subs = [];\n    // todo: assign only subset of fields\n    Object.assign(this, this._config);\n    this._datepicker = cis.createLoader(_elementRef, _viewContainerRef, _renderer);\n  }\n  /**\n   * Initial value of datepicker\n   * @param {?} value\n   * @return {?}\n   */\n  set bsValue(value) {\n    if (this._bsValue === value) {\n      return;\n    }\n    this._bsValue = value;\n    this.bsValueChange.emit(value);\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    this.setConfig();\n    // if date changes from external source (model -> view)\n    this._subs.push(this.bsValueChange.subscribe(\n    /**\n    * @param {?} value\n    * @return {?}\n    */\n    value => {\n      this._datepickerRef.instance.value = value;\n    }));\n    // if date changes from picker (view -> model)\n    this._subs.push(this._datepickerRef.instance.valueChange.subscribe(\n    /**\n    * @param {?} value\n    * @return {?}\n    */\n    value => {\n      this.bsValue = value;\n    }));\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n  ngOnChanges(changes) {\n    if (!this._datepickerRef || !this._datepickerRef.instance) {\n      return;\n    }\n    if (changes.minDate) {\n      this._datepickerRef.instance.minDate = this.minDate;\n      this.setConfig();\n    }\n    if (changes.maxDate) {\n      this._datepickerRef.instance.maxDate = this.maxDate;\n      this.setConfig();\n    }\n    if (changes.datesDisabled) {\n      this._datepickerRef.instance.datesDisabled = this.datesDisabled;\n      this.setConfig();\n    }\n    if (changes.datesEnabled) {\n      this._datepickerRef.instance.datesEnabled = this.datesEnabled;\n      this._datepickerRef.instance.value = this._bsValue;\n    }\n    if (changes.isDisabled) {\n      this._datepickerRef.instance.isDisabled = this.isDisabled;\n      this.setConfig();\n    }\n    if (changes.dateCustomClasses) {\n      this._datepickerRef.instance.dateCustomClasses = this.dateCustomClasses;\n      this.setConfig();\n    }\n  }\n  /**\n   * Set config for datepicker\n   * @return {?}\n   */\n  setConfig() {\n    if (this._datepicker) {\n      this._datepicker.hide();\n    }\n    this._config = Object.assign({}, this._config, this.bsConfig, {\n      value: this._bsValue,\n      isDisabled: this.isDisabled,\n      minDate: this.minDate || this.bsConfig && this.bsConfig.minDate,\n      maxDate: this.maxDate || this.bsConfig && this.bsConfig.maxDate,\n      dateCustomClasses: this.dateCustomClasses || this.bsConfig && this.bsConfig.dateCustomClasses,\n      datesDisabled: this.datesDisabled || this.bsConfig && this.bsConfig.datesDisabled,\n      datesEnabled: this.datesEnabled || this.bsConfig && this.bsConfig.datesEnabled\n    });\n    this._datepickerRef = this._datepicker.provide({\n      provide: BsDatepickerConfig,\n      useValue: this._config\n    }).attach(BsDatepickerInlineContainerComponent).to(this._elementRef).show();\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._datepicker.dispose();\n  }\n}\n\n/** @nocollapse */\n\nif (false) {\n  /** @type {?} */\n  BsDatepickerInlineDirective.prototype._bsValue;\n  /**\n   * Config object for datepicker\n   * @type {?}\n   */\n  BsDatepickerInlineDirective.prototype.bsConfig;\n  /**\n   * Indicates whether datepicker is enabled or not\n   * @type {?}\n   */\n  BsDatepickerInlineDirective.prototype.isDisabled;\n  /**\n   * Minimum date which is available for selection\n   * @type {?}\n   */\n  BsDatepickerInlineDirective.prototype.minDate;\n  /**\n   * Maximum date which is available for selection\n   * @type {?}\n   */\n  BsDatepickerInlineDirective.prototype.maxDate;\n  /**\n   * Date custom classes\n   * @type {?}\n   */\n  BsDatepickerInlineDirective.prototype.dateCustomClasses;\n  /**\n   * Disable specific dates\n   * @type {?}\n   */\n  BsDatepickerInlineDirective.prototype.datesEnabled;\n  /**\n   * Enable specific dates\n   * @type {?}\n   */\n  BsDatepickerInlineDirective.prototype.datesDisabled;\n  /**\n   * Emits when datepicker value has been changed\n   * @type {?}\n   */\n  BsDatepickerInlineDirective.prototype.bsValueChange;\n  /**\n   * @type {?}\n   * @protected\n   */\n  BsDatepickerInlineDirective.prototype._subs;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDatepickerInlineDirective.prototype._datepicker;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDatepickerInlineDirective.prototype._datepickerRef;\n  /** @type {?} */\n  BsDatepickerInlineDirective.prototype._config;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDatepickerInlineDirective.prototype._elementRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass BsDaterangepickerInlineConfig extends BsDatepickerConfig {\n  constructor() {\n    super(...arguments);\n    // DatepickerRenderOptions\n    this.displayMonths = 2;\n    /**\n     * turn on/off animation\n     */\n    this.isAnimated = false;\n  }\n}\nif (false) {\n  /** @type {?} */\n  BsDaterangepickerInlineConfig.prototype.displayMonths;\n  /**\n   * turn on/off animation\n   * @type {?}\n   */\n  BsDaterangepickerInlineConfig.prototype.isAnimated;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass BsDaterangepickerContainerComponent extends BsDatepickerAbstractComponent {\n  /**\n   * @param {?} _renderer\n   * @param {?} _config\n   * @param {?} _store\n   * @param {?} _element\n   * @param {?} _actions\n   * @param {?} _effects\n   * @param {?} _positionService\n   */\n  constructor(_renderer, _config, _store, _element, _actions, _effects, _positionService) {\n    super();\n    this._config = _config;\n    this._store = _store;\n    this._element = _element;\n    this._actions = _actions;\n    this._positionService = _positionService;\n    this.valueChange = new EventEmitter();\n    this.animationState = 'void';\n    this._rangeStack = [];\n    this.chosenRange = [];\n    this._subs = [];\n    this._effects = _effects;\n    this.customRanges = this._config.ranges;\n    _renderer.setStyle(_element.nativeElement, 'display', 'block');\n    _renderer.setStyle(_element.nativeElement, 'position', 'absolute');\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set value(value) {\n    this._effects.setRangeValue(value);\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    this._positionService.setOptions({\n      modifiers: {\n        flip: {\n          enabled: this._config.adaptivePosition\n        }\n      },\n      allowedPositions: ['top', 'bottom']\n    });\n    this._positionService.event$.pipe(take(1)).subscribe(\n    /**\n    * @return {?}\n    */\n    () => {\n      this._positionService.disable();\n      if (this._config.isAnimated) {\n        this.animationState = this.isTopPosition ? 'animated-up' : 'animated-down';\n        return;\n      }\n      this.animationState = 'unanimated';\n    });\n    this.containerClass = this._config.containerClass;\n    this.isOtherMonthsActive = this._config.selectFromOtherMonth;\n    this._effects.init(this._store)\n    // intial state options\n    // todo: fix this, split configs\n    .setOptions(this._config)\n    // data binding view --> model\n    .setBindings(this)\n    // set event handlers\n    .setEventHandlers(this).registerDatepickerSideEffects();\n    // todo: move it somewhere else\n    // on selected date change\n    this._subs.push(this._store.select(\n    /**\n    * @param {?} state\n    * @return {?}\n    */\n    state => state.selectedRange).subscribe(\n    /**\n    * @param {?} date\n    * @return {?}\n    */\n    date => {\n      this.valueChange.emit(date);\n      this.chosenRange = date;\n    }));\n  }\n  /**\n   * @return {?}\n   */\n  get isTopPosition() {\n    return this._element.nativeElement.classList.contains('top');\n  }\n  /**\n   * @return {?}\n   */\n  positionServiceEnable() {\n    this._positionService.enable();\n  }\n  /**\n   * @param {?} day\n   * @return {?}\n   */\n  daySelectHandler(day) {\n    if (!day) {\n      return;\n    }\n    /** @type {?} */\n    const isDisabled = this.isOtherMonthsActive ? day.isDisabled : day.isOtherMonth || day.isDisabled;\n    if (isDisabled) {\n      return;\n    }\n    // if only one date is already selected\n    // and user clicks on previous date\n    // start selection from new date\n    // but if new date is after initial one\n    // than finish selection\n    if (this._rangeStack.length === 1) {\n      this._rangeStack = day.date >= this._rangeStack[0] ? [this._rangeStack[0], day.date] : [day.date];\n    }\n    if (this._rangeStack.length === 0) {\n      this._rangeStack = [day.date];\n    }\n    this._store.dispatch(this._actions.selectRange(this._rangeStack));\n    if (this._rangeStack.length === 2) {\n      this._rangeStack = [];\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    for (const sub of this._subs) {\n      sub.unsubscribe();\n    }\n    this._effects.destroy();\n  }\n  /**\n   * @param {?} dates\n   * @return {?}\n   */\n  setRangeOnCalendar(dates) {\n    this._rangeStack = dates === null ? [] : dates.value instanceof Date ? [dates.value] : dates.value;\n    this._store.dispatch(this._actions.selectRange(this._rangeStack));\n  }\n}\n\n/** @nocollapse */\n\nif (false) {\n  /** @type {?} */\n  BsDaterangepickerContainerComponent.prototype.valueChange;\n  /** @type {?} */\n  BsDaterangepickerContainerComponent.prototype.animationState;\n  /** @type {?} */\n  BsDaterangepickerContainerComponent.prototype._rangeStack;\n  /** @type {?} */\n  BsDaterangepickerContainerComponent.prototype.chosenRange;\n  /** @type {?} */\n  BsDaterangepickerContainerComponent.prototype._subs;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDaterangepickerContainerComponent.prototype._config;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDaterangepickerContainerComponent.prototype._store;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDaterangepickerContainerComponent.prototype._element;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDaterangepickerContainerComponent.prototype._actions;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDaterangepickerContainerComponent.prototype._positionService;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass BsDaterangepickerInlineContainerComponent extends BsDaterangepickerContainerComponent {\n  /**\n   * @param {?} _renderer\n   * @param {?} _config\n   * @param {?} _store\n   * @param {?} _element\n   * @param {?} _actions\n   * @param {?} _effects\n   * @param {?} _positioningService\n   */\n  constructor(_renderer, _config, _store, _element, _actions, _effects, _positioningService) {\n    super(_renderer, _config, _store, _element, _actions, _effects, _positioningService);\n    _renderer.setStyle(_element.nativeElement, 'display', 'inline-block');\n    _renderer.setStyle(_element.nativeElement, 'position', 'static');\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass BsDaterangepickerInlineDirective {\n  /**\n   * @param {?} _config\n   * @param {?} _elementRef\n   * @param {?} _renderer\n   * @param {?} _viewContainerRef\n   * @param {?} cis\n   */\n  constructor(_config, _elementRef, _renderer, _viewContainerRef, cis) {\n    this._config = _config;\n    this._elementRef = _elementRef;\n    /**\n     * Emits when daterangepicker value has been changed\n     */\n    this.bsValueChange = new EventEmitter();\n    this._subs = [];\n    // todo: assign only subset of fields\n    Object.assign(this, this._config);\n    this._datepicker = cis.createLoader(_elementRef, _viewContainerRef, _renderer);\n  }\n  /**\n   * Initial value of datepicker\n   * @param {?} value\n   * @return {?}\n   */\n  set bsValue(value) {\n    if (this._bsValue === value) {\n      return;\n    }\n    this._bsValue = value;\n    this.bsValueChange.emit(value);\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    this.setConfig();\n    // if date changes from external source (model -> view)\n    this._subs.push(this.bsValueChange.subscribe(\n    /**\n    * @param {?} value\n    * @return {?}\n    */\n    value => {\n      this._datepickerRef.instance.value = value;\n    }));\n    // if date changes from picker (view -> model)\n    this._subs.push(this._datepickerRef.instance.valueChange.pipe(filter(\n    /**\n    * @param {?} range\n    * @return {?}\n    */\n    range => range && range[0] && !!range[1])).subscribe(\n    /**\n    * @param {?} value\n    * @return {?}\n    */\n    value => {\n      this.bsValue = value;\n    }));\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n  ngOnChanges(changes) {\n    if (!this._datepickerRef || !this._datepickerRef.instance) {\n      return;\n    }\n    if (changes.minDate) {\n      this._datepickerRef.instance.minDate = this.minDate;\n      this.setConfig();\n    }\n    if (changes.maxDate) {\n      this._datepickerRef.instance.maxDate = this.maxDate;\n      this.setConfig();\n    }\n    if (changes.datesEnabled) {\n      this._datepickerRef.instance.datesEnabled = this.datesEnabled;\n    }\n    if (changes.datesDisabled) {\n      this._datepickerRef.instance.datesDisabled = this.datesDisabled;\n      this.setConfig();\n    }\n    if (changes.daysDisabled) {\n      this._datepickerRef.instance.daysDisabled = this.daysDisabled;\n      this.setConfig();\n    }\n    if (changes.isDisabled) {\n      this._datepickerRef.instance.isDisabled = this.isDisabled;\n      this.setConfig();\n    }\n    if (changes.dateCustomClasses) {\n      this._datepickerRef.instance.dateCustomClasses = this.dateCustomClasses;\n      this.setConfig();\n    }\n  }\n  /**\n   * Set config for datepicker\n   * @return {?}\n   */\n  setConfig() {\n    if (this._datepicker) {\n      this._datepicker.hide();\n    }\n    this._config = Object.assign({}, this._config, this.bsConfig, {\n      value: this._bsValue,\n      isDisabled: this.isDisabled,\n      minDate: this.minDate || this.bsConfig && this.bsConfig.minDate,\n      maxDate: this.maxDate || this.bsConfig && this.bsConfig.maxDate,\n      daysDisabled: this.daysDisabled || this.bsConfig && this.bsConfig.daysDisabled,\n      dateCustomClasses: this.dateCustomClasses || this.bsConfig && this.bsConfig.dateCustomClasses,\n      datesDisabled: this.datesDisabled || this.bsConfig && this.bsConfig.datesDisabled,\n      datesEnabled: this.datesEnabled || this.bsConfig && this.bsConfig.datesEnabled,\n      ranges: this.bsConfig && this.bsConfig.ranges\n    });\n    this._datepickerRef = this._datepicker.provide({\n      provide: BsDatepickerConfig,\n      useValue: this._config\n    }).attach(BsDaterangepickerInlineContainerComponent).to(this._elementRef).show();\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._datepicker.dispose();\n  }\n}\n\n/** @nocollapse */\n\nif (false) {\n  /** @type {?} */\n  BsDaterangepickerInlineDirective.prototype._bsValue;\n  /**\n   * Config object for datepicker\n   * @type {?}\n   */\n  BsDaterangepickerInlineDirective.prototype.bsConfig;\n  /**\n   * Indicates whether datepicker is enabled or not\n   * @type {?}\n   */\n  BsDaterangepickerInlineDirective.prototype.isDisabled;\n  /**\n   * Minimum date which is available for selection\n   * @type {?}\n   */\n  BsDaterangepickerInlineDirective.prototype.minDate;\n  /**\n   * Maximum date which is available for selection\n   * @type {?}\n   */\n  BsDaterangepickerInlineDirective.prototype.maxDate;\n  /**\n   * Date custom classes\n   * @type {?}\n   */\n  BsDaterangepickerInlineDirective.prototype.dateCustomClasses;\n  /**\n   * Disable specific days, e.g. [0,6] will disable all Saturdays and Sundays\n   * @type {?}\n   */\n  BsDaterangepickerInlineDirective.prototype.daysDisabled;\n  /**\n   * Disable specific dates\n   * @type {?}\n   */\n  BsDaterangepickerInlineDirective.prototype.datesDisabled;\n  /**\n   * Disable specific dates\n   * @type {?}\n   */\n  BsDaterangepickerInlineDirective.prototype.datesEnabled;\n  /**\n   * Emits when daterangepicker value has been changed\n   * @type {?}\n   */\n  BsDaterangepickerInlineDirective.prototype.bsValueChange;\n  /**\n   * @type {?}\n   * @protected\n   */\n  BsDaterangepickerInlineDirective.prototype._subs;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDaterangepickerInlineDirective.prototype._datepicker;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDaterangepickerInlineDirective.prototype._datepickerRef;\n  /** @type {?} */\n  BsDaterangepickerInlineDirective.prototype._config;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDaterangepickerInlineDirective.prototype._elementRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst BS_DATEPICKER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(\n  /**\n  * @return {?}\n  */\n  () => BsDatepickerInputDirective),\n  multi: true\n};\n/** @type {?} */\nconst BS_DATEPICKER_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(\n  /**\n  * @return {?}\n  */\n  () => BsDatepickerInputDirective),\n  multi: true\n};\nclass BsDatepickerInputDirective {\n  /**\n   * @param {?} _picker\n   * @param {?} _localeService\n   * @param {?} _renderer\n   * @param {?} _elRef\n   * @param {?} changeDetection\n   */\n  constructor(_picker, _localeService, _renderer, _elRef, changeDetection) {\n    this._picker = _picker;\n    this._localeService = _localeService;\n    this._renderer = _renderer;\n    this._elRef = _elRef;\n    this.changeDetection = changeDetection;\n    this._onChange = Function.prototype;\n    this._onTouched = Function.prototype;\n    /* tslint:disable-next-line: no-unused-variable */\n    this._validatorChange = Function.prototype;\n    // update input value on datepicker value update\n    this._picker.bsValueChange.subscribe(\n    /**\n    * @param {?} value\n    * @return {?}\n    */\n    value => {\n      this._setInputValue(value);\n      if (this._value !== value) {\n        this._value = value;\n        this._onChange(value);\n        this._onTouched();\n      }\n      this.changeDetection.markForCheck();\n    });\n    // update input value on locale change\n    this._localeService.localeChange.subscribe(\n    /**\n    * @return {?}\n    */\n    () => {\n      this._setInputValue(this._value);\n    });\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  onKeydownEvent(event) {\n    if (event.keyCode === 13 || event.code === 'Enter') {\n      this.hide();\n    }\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  _setInputValue(value) {\n    /** @type {?} */\n    const initialDate = !value ? '' : formatDate(value, this._picker._config.dateInputFormat, this._localeService.currentLocale);\n    this._renderer.setProperty(this._elRef.nativeElement, 'value', initialDate);\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  onChange(event) {\n    /* tslint:disable-next-line: no-any*/\n    this.writeValue( /** @type {?} */event.target.value);\n    this._onChange(this._value);\n    if (this._picker._config.returnFocusToInput) {\n      this._renderer.selectRootElement(this._elRef.nativeElement).focus();\n    }\n    this._onTouched();\n  }\n  /**\n   * @param {?} c\n   * @return {?}\n   */\n  validate(c) {\n    /** @type {?} */\n    const _value = c.value;\n    /* tslint:disable-next-line: prefer-switch */\n    if (_value === null || _value === undefined || _value === '') {\n      return null;\n    }\n    if (isDate(_value)) {\n      /** @type {?} */\n      const _isDateValid = isDateValid(_value);\n      if (!_isDateValid) {\n        return {\n          bsDate: {\n            invalid: _value\n          }\n        };\n      }\n      if (this._picker && this._picker.minDate && isBefore(_value, this._picker.minDate, 'date')) {\n        this.writeValue(this._picker.minDate);\n        return {\n          bsDate: {\n            minDate: this._picker.minDate\n          }\n        };\n      }\n      if (this._picker && this._picker.maxDate && isAfter(_value, this._picker.maxDate, 'date')) {\n        this.writeValue(this._picker.maxDate);\n        return {\n          bsDate: {\n            maxDate: this._picker.maxDate\n          }\n        };\n      }\n    }\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnValidatorChange(fn) {\n    this._validatorChange = fn;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  writeValue(value) {\n    if (!value) {\n      this._value = null;\n    } else {\n      /** @type {?} */\n      const _localeKey = this._localeService.currentLocale;\n      /** @type {?} */\n      const _locale = getLocale(_localeKey);\n      if (!_locale) {\n        throw new Error(`Locale \"${_localeKey}\" is not defined, please add it with \"defineLocale(...)\"`);\n      }\n      this._value = parseDate(value, this._picker._config.dateInputFormat, this._localeService.currentLocale);\n      if (this._picker._config.useUtc) {\n        this._value = utcAsLocal(this._value);\n      }\n    }\n    this._picker.bsValue = this._value;\n  }\n  /**\n   * @param {?} isDisabled\n   * @return {?}\n   */\n  setDisabledState(isDisabled) {\n    this._picker.isDisabled = isDisabled;\n    if (isDisabled) {\n      this._renderer.setAttribute(this._elRef.nativeElement, 'disabled', 'disabled');\n      return;\n    }\n    this._renderer.removeAttribute(this._elRef.nativeElement, 'disabled');\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  /**\n   * @return {?}\n   */\n  onBlur() {\n    this._onTouched();\n  }\n  /**\n   * @return {?}\n   */\n  hide() {\n    this._picker.hide();\n    this._renderer.selectRootElement(this._elRef.nativeElement).blur();\n    if (this._picker._config.returnFocusToInput) {\n      this._renderer.selectRootElement(this._elRef.nativeElement).focus();\n    }\n  }\n}\n\n/** @nocollapse */\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDatepickerInputDirective.prototype._onChange;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDatepickerInputDirective.prototype._onTouched;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDatepickerInputDirective.prototype._validatorChange;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDatepickerInputDirective.prototype._value;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDatepickerInputDirective.prototype._picker;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDatepickerInputDirective.prototype._localeService;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDatepickerInputDirective.prototype._renderer;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDatepickerInputDirective.prototype._elRef;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDatepickerInputDirective.prototype.changeDetection;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass BsDaterangepickerConfig extends BsDatepickerConfig {\n  constructor() {\n    super(...arguments);\n    // DatepickerRenderOptions\n    this.displayMonths = 2;\n  }\n}\nif (false) {\n  /** @type {?} */\n  BsDaterangepickerConfig.prototype.displayMonths;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass BsDaterangepickerDirective {\n  /**\n   * @param {?} _config\n   * @param {?} _elementRef\n   * @param {?} _renderer\n   * @param {?} _viewContainerRef\n   * @param {?} cis\n   */\n  constructor(_config, _elementRef, _renderer, _viewContainerRef, cis) {\n    this._config = _config;\n    this._elementRef = _elementRef;\n    this._renderer = _renderer;\n    /**\n     * Placement of a daterangepicker. Accepts: \"top\", \"bottom\", \"left\", \"right\"\n     */\n    this.placement = 'bottom';\n    /**\n     * Specifies events that should trigger. Supports a space separated list of\n     * event names.\n     */\n    this.triggers = 'click';\n    /**\n     * Close daterangepicker on outside click\n     */\n    this.outsideClick = true;\n    /**\n     * A selector specifying the element the daterangepicker should be appended to.\n     */\n    this.container = 'body';\n    this.outsideEsc = true;\n    /**\n     * Emits when daterangepicker value has been changed\n     */\n    this.bsValueChange = new EventEmitter();\n    this._subs = [];\n    this._datepicker = cis.createLoader(_elementRef, _viewContainerRef, _renderer);\n    Object.assign(this, _config);\n    this.onShown = this._datepicker.onShown;\n    this.onHidden = this._datepicker.onHidden;\n    this.isOpen$ = new BehaviorSubject(this.isOpen);\n  }\n  /**\n   * Returns whether or not the daterangepicker is currently being shown\n   * @return {?}\n   */\n  get isOpen() {\n    return this._datepicker.isShown;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set isOpen(value) {\n    this.isOpen$.next(value);\n  }\n  /**\n   * Initial value of daterangepicker\n   * @param {?} value\n   * @return {?}\n   */\n  set bsValue(value) {\n    if (this._bsValue === value) {\n      return;\n    }\n    this._bsValue = value;\n    this.bsValueChange.emit(value);\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    this.isDestroy$ = new Subject();\n    this._datepicker.listen({\n      outsideClick: this.outsideClick,\n      outsideEsc: this.outsideEsc,\n      triggers: this.triggers,\n      show:\n      /**\n      * @return {?}\n      */\n      () => this.show()\n    });\n    this.setConfig();\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n  ngOnChanges(changes) {\n    if (!this._datepickerRef || !this._datepickerRef.instance) {\n      return;\n    }\n    if (changes.minDate) {\n      this._datepickerRef.instance.minDate = this.minDate;\n    }\n    if (changes.maxDate) {\n      this._datepickerRef.instance.maxDate = this.maxDate;\n    }\n    if (changes.datesDisabled) {\n      this._datepickerRef.instance.datesDisabled = this.datesDisabled;\n    }\n    if (changes.datesEnabled) {\n      this._datepickerRef.instance.datesEnabled = this.datesEnabled;\n    }\n    if (changes.daysDisabled) {\n      this._datepickerRef.instance.daysDisabled = this.daysDisabled;\n    }\n    if (changes.isDisabled) {\n      this._datepickerRef.instance.isDisabled = this.isDisabled;\n    }\n    if (changes.dateCustomClasses) {\n      this._datepickerRef.instance.dateCustomClasses = this.dateCustomClasses;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterViewInit() {\n    this.isOpen$.pipe(filter(\n    /**\n    * @param {?} isOpen\n    * @return {?}\n    */\n    isOpen => isOpen !== this.isOpen), takeUntil(this.isDestroy$)).subscribe(\n    /**\n    * @return {?}\n    */\n    () => this.toggle());\n  }\n  /**\n   * Opens an element’s datepicker. This is considered a “manual” triggering of\n   * the datepicker.\n   * @return {?}\n   */\n  show() {\n    if (this._datepicker.isShown) {\n      return;\n    }\n    this.setConfig();\n    this._datepickerRef = this._datepicker.provide({\n      provide: BsDatepickerConfig,\n      useValue: this._config\n    }).attach(BsDaterangepickerContainerComponent).to(this.container).position({\n      attachment: this.placement\n    }).show({\n      placement: this.placement\n    });\n    // if date changes from external source (model -> view)\n    this._subs.push(this.bsValueChange.subscribe(\n    /**\n    * @param {?} value\n    * @return {?}\n    */\n    value => {\n      this._datepickerRef.instance.value = value;\n    }));\n    // if date changes from picker (view -> model)\n    this._subs.push(this._datepickerRef.instance.valueChange.pipe(filter(\n    /**\n    * @param {?} range\n    * @return {?}\n    */\n    range => range && range[0] && !!range[1])).subscribe(\n    /**\n    * @param {?} value\n    * @return {?}\n    */\n    value => {\n      this.bsValue = value;\n      this.hide();\n    }));\n  }\n  /**\n   * Set config for daterangepicker\n   * @return {?}\n   */\n  setConfig() {\n    this._config = Object.assign({}, this._config, this.bsConfig, {\n      value: this._bsValue,\n      isDisabled: this.isDisabled,\n      minDate: this.minDate || this.bsConfig && this.bsConfig.minDate,\n      maxDate: this.maxDate || this.bsConfig && this.bsConfig.maxDate,\n      daysDisabled: this.daysDisabled || this.bsConfig && this.bsConfig.daysDisabled,\n      dateCustomClasses: this.dateCustomClasses || this.bsConfig && this.bsConfig.dateCustomClasses,\n      datesDisabled: this.datesDisabled || this.bsConfig && this.bsConfig.datesDisabled,\n      datesEnabled: this.datesEnabled || this.bsConfig && this.bsConfig.datesEnabled,\n      ranges: this.bsConfig && this.bsConfig.ranges\n    });\n  }\n  /**\n   * Closes an element’s datepicker. This is considered a “manual” triggering of\n   * the datepicker.\n   * @return {?}\n   */\n  hide() {\n    if (this.isOpen) {\n      this._datepicker.hide();\n    }\n    for (const sub of this._subs) {\n      sub.unsubscribe();\n    }\n    if (this._config.returnFocusToInput) {\n      this._renderer.selectRootElement(this._elementRef.nativeElement).focus();\n    }\n  }\n  /**\n   * Toggles an element’s datepicker. This is considered a “manual” triggering\n   * of the datepicker.\n   * @return {?}\n   */\n  toggle() {\n    if (this.isOpen) {\n      return this.hide();\n    }\n    this.show();\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._datepicker.dispose();\n    this.isOpen$.next(false);\n    if (this.isDestroy$) {\n      this.isDestroy$.next();\n      this.isDestroy$.complete();\n    }\n  }\n}\n\n/** @nocollapse */\n\nif (false) {\n  /**\n   * Placement of a daterangepicker. Accepts: \"top\", \"bottom\", \"left\", \"right\"\n   * @type {?}\n   */\n  BsDaterangepickerDirective.prototype.placement;\n  /**\n   * Specifies events that should trigger. Supports a space separated list of\n   * event names.\n   * @type {?}\n   */\n  BsDaterangepickerDirective.prototype.triggers;\n  /**\n   * Close daterangepicker on outside click\n   * @type {?}\n   */\n  BsDaterangepickerDirective.prototype.outsideClick;\n  /**\n   * A selector specifying the element the daterangepicker should be appended to.\n   * @type {?}\n   */\n  BsDaterangepickerDirective.prototype.container;\n  /** @type {?} */\n  BsDaterangepickerDirective.prototype.outsideEsc;\n  /**\n   * Emits an event when the daterangepicker is shown\n   * @type {?}\n   */\n  BsDaterangepickerDirective.prototype.onShown;\n  /**\n   * Emits an event when the daterangepicker is hidden\n   * @type {?}\n   */\n  BsDaterangepickerDirective.prototype.onHidden;\n  /** @type {?} */\n  BsDaterangepickerDirective.prototype._bsValue;\n  /** @type {?} */\n  BsDaterangepickerDirective.prototype.isOpen$;\n  /** @type {?} */\n  BsDaterangepickerDirective.prototype.isDestroy$;\n  /**\n   * Config object for daterangepicker\n   * @type {?}\n   */\n  BsDaterangepickerDirective.prototype.bsConfig;\n  /**\n   * Indicates whether daterangepicker's content is enabled or not\n   * @type {?}\n   */\n  BsDaterangepickerDirective.prototype.isDisabled;\n  /**\n   * Minimum date which is available for selection\n   * @type {?}\n   */\n  BsDaterangepickerDirective.prototype.minDate;\n  /**\n   * Maximum date which is available for selection\n   * @type {?}\n   */\n  BsDaterangepickerDirective.prototype.maxDate;\n  /**\n   * Date custom classes\n   * @type {?}\n   */\n  BsDaterangepickerDirective.prototype.dateCustomClasses;\n  /**\n   * Disable specific days, e.g. [0,6] will disable all Saturdays and Sundays\n   * @type {?}\n   */\n  BsDaterangepickerDirective.prototype.daysDisabled;\n  /**\n   * Disable specific dates\n   * @type {?}\n   */\n  BsDaterangepickerDirective.prototype.datesDisabled;\n  /**\n   * Enable specific dates\n   * @type {?}\n   */\n  BsDaterangepickerDirective.prototype.datesEnabled;\n  /**\n   * Emits when daterangepicker value has been changed\n   * @type {?}\n   */\n  BsDaterangepickerDirective.prototype.bsValueChange;\n  /**\n   * @type {?}\n   * @protected\n   */\n  BsDaterangepickerDirective.prototype._subs;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDaterangepickerDirective.prototype._datepicker;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDaterangepickerDirective.prototype._datepickerRef;\n  /** @type {?} */\n  BsDaterangepickerDirective.prototype._config;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDaterangepickerDirective.prototype._elementRef;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDaterangepickerDirective.prototype._renderer;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst BS_DATERANGEPICKER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(\n  /**\n  * @return {?}\n  */\n  () => BsDaterangepickerInputDirective),\n  multi: true\n};\n/** @type {?} */\nconst BS_DATERANGEPICKER_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(\n  /**\n  * @return {?}\n  */\n  () => BsDaterangepickerInputDirective),\n  multi: true\n};\nclass BsDaterangepickerInputDirective {\n  /**\n   * @param {?} _picker\n   * @param {?} _localeService\n   * @param {?} _renderer\n   * @param {?} _elRef\n   * @param {?} changeDetection\n   */\n  constructor(_picker, _localeService, _renderer, _elRef, changeDetection) {\n    this._picker = _picker;\n    this._localeService = _localeService;\n    this._renderer = _renderer;\n    this._elRef = _elRef;\n    this.changeDetection = changeDetection;\n    this._onChange = Function.prototype;\n    this._onTouched = Function.prototype;\n    /* tslint:disable-next-line: no-unused-variable */\n    this._validatorChange = Function.prototype;\n    // update input value on datepicker value update\n    this._picker.bsValueChange.subscribe(\n    /**\n    * @param {?} value\n    * @return {?}\n    */\n    value => {\n      this._setInputValue(value);\n      if (this._value !== value) {\n        this._value = value;\n        this._onChange(value);\n        this._onTouched();\n      }\n      this.changeDetection.markForCheck();\n    });\n    // update input value on locale change\n    this._localeService.localeChange.subscribe(\n    /**\n    * @return {?}\n    */\n    () => {\n      this._setInputValue(this._value);\n    });\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  onKeydownEvent(event) {\n    if (event.keyCode === 13 || event.code === 'Enter') {\n      this.hide();\n    }\n  }\n  /**\n   * @param {?} date\n   * @return {?}\n   */\n  _setInputValue(date) {\n    /** @type {?} */\n    let range = '';\n    if (date) {\n      /** @type {?} */\n      const start = !date[0] ? '' : formatDate(date[0], this._picker._config.rangeInputFormat, this._localeService.currentLocale);\n      /** @type {?} */\n      const end = !date[1] ? '' : formatDate(date[1], this._picker._config.rangeInputFormat, this._localeService.currentLocale);\n      range = start && end ? start + this._picker._config.rangeSeparator + end : '';\n    }\n    this._renderer.setProperty(this._elRef.nativeElement, 'value', range);\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  onChange(event) {\n    /* tslint:disable-next-line: no-any*/\n    this.writeValue( /** @type {?} */event.target.value);\n    this._onChange(this._value);\n    if (this._picker._config.returnFocusToInput) {\n      this._renderer.selectRootElement(this._elRef.nativeElement).focus();\n    }\n    this._onTouched();\n  }\n  /**\n   * @param {?} c\n   * @return {?}\n   */\n  validate(c) {\n    /** @type {?} */\n    const _value = c.value;\n    /** @type {?} */\n    const errors = [];\n    if (_value === null || _value === undefined || !isArray(_value)) {\n      return null;\n    }\n    // @ts-ignore\n    _value.sort(\n    /**\n    * @param {?} a\n    * @param {?} b\n    * @return {?}\n    */\n    (a, b) => a - b);\n    /** @type {?} */\n    const _isFirstDateValid = isDateValid(_value[0]);\n    /** @type {?} */\n    const _isSecondDateValid = isDateValid(_value[1]);\n    if (!_isFirstDateValid) {\n      return {\n        bsDate: {\n          invalid: _value[0]\n        }\n      };\n    }\n    if (!_isSecondDateValid) {\n      return {\n        bsDate: {\n          invalid: _value[1]\n        }\n      };\n    }\n    if (this._picker && this._picker.minDate && isBefore(_value[0], this._picker.minDate, 'date')) {\n      _value[0] = this._picker.minDate;\n      errors.push({\n        bsDate: {\n          minDate: this._picker.minDate\n        }\n      });\n    }\n    if (this._picker && this._picker.maxDate && isAfter(_value[1], this._picker.maxDate, 'date')) {\n      _value[1] = this._picker.maxDate;\n      errors.push({\n        bsDate: {\n          maxDate: this._picker.maxDate\n        }\n      });\n    }\n    if (errors.length > 0) {\n      this.writeValue(_value);\n      return errors;\n    }\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnValidatorChange(fn) {\n    this._validatorChange = fn;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  writeValue(value) {\n    if (!value) {\n      this._value = null;\n    } else {\n      /** @type {?} */\n      const _localeKey = this._localeService.currentLocale;\n      /** @type {?} */\n      const _locale = getLocale(_localeKey);\n      if (!_locale) {\n        throw new Error(`Locale \"${_localeKey}\" is not defined, please add it with \"defineLocale(...)\"`);\n      }\n      /** @type {?} */\n      let _input = [];\n      if (typeof value === 'string') {\n        _input = value.split(this._picker._config.rangeSeparator);\n      }\n      if (Array.isArray(value)) {\n        _input = value;\n      }\n      this._value = /** @type {?} */_input.map(\n      /**\n      * @param {?} _val\n      * @return {?}\n      */\n      _val => {\n        if (this._picker._config.useUtc) {\n          return utcAsLocal(parseDate(_val, this._picker._config.dateInputFormat, this._localeService.currentLocale));\n        }\n        return parseDate(_val, this._picker._config.dateInputFormat, this._localeService.currentLocale);\n      }).map(\n      /**\n      * @param {?} date\n      * @return {?}\n      */\n      date => isNaN(date.valueOf()) ? null : date);\n    }\n    this._picker.bsValue = this._value;\n  }\n  /**\n   * @param {?} isDisabled\n   * @return {?}\n   */\n  setDisabledState(isDisabled) {\n    this._picker.isDisabled = isDisabled;\n    if (isDisabled) {\n      this._renderer.setAttribute(this._elRef.nativeElement, 'disabled', 'disabled');\n      return;\n    }\n    this._renderer.removeAttribute(this._elRef.nativeElement, 'disabled');\n  }\n  /* tslint:disable-next-line: no-any*/\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  /* tslint:disable-next-line: no-any*/\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  /**\n   * @return {?}\n   */\n  onBlur() {\n    this._onTouched();\n  }\n  /**\n   * @return {?}\n   */\n  hide() {\n    this._picker.hide();\n    this._renderer.selectRootElement(this._elRef.nativeElement).blur();\n    if (this._picker._config.returnFocusToInput) {\n      this._renderer.selectRootElement(this._elRef.nativeElement).focus();\n    }\n  }\n}\n\n/** @nocollapse */\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDaterangepickerInputDirective.prototype._onChange;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDaterangepickerInputDirective.prototype._onTouched;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDaterangepickerInputDirective.prototype._validatorChange;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDaterangepickerInputDirective.prototype._value;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDaterangepickerInputDirective.prototype._picker;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDaterangepickerInputDirective.prototype._localeService;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDaterangepickerInputDirective.prototype._renderer;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDaterangepickerInputDirective.prototype._elRef;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDaterangepickerInputDirective.prototype.changeDetection;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass BsCalendarLayoutComponent {}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass BsCurrentDateViewComponent {}\nif (false) {\n  /** @type {?} */\n  BsCurrentDateViewComponent.prototype.title;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction BsCustomDates() {}\nif (false) {\n  /** @type {?} */\n  BsCustomDates.prototype.label;\n  /** @type {?} */\n  BsCustomDates.prototype.value;\n}\nclass BsCustomDatesViewComponent {\n  constructor() {\n    this.onSelect = new EventEmitter();\n    this.customRange = null;\n  }\n  /**\n   * @param {?} range\n   * @return {?}\n   */\n  selectFromRanges(range) {\n    this.onSelect.emit(range);\n  }\n  /**\n   * @return {?}\n   */\n  checkRange() {\n    return this.ranges ? this.ranges.filter(\n    /**\n    * @param {?} range\n    * @return {?}\n    */\n    range => range.value === this.selectedRange).length > 0 : false;\n  }\n}\nif (false) {\n  /** @type {?} */\n  BsCustomDatesViewComponent.prototype.ranges;\n  /** @type {?} */\n  BsCustomDatesViewComponent.prototype.selectedRange;\n  /** @type {?} */\n  BsCustomDatesViewComponent.prototype.onSelect;\n  /** @type {?} */\n  BsCustomDatesViewComponent.prototype.customRange;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass BsDatepickerDayDecoratorComponent {\n  /**\n   * @param {?} _config\n   * @param {?} _elRef\n   * @param {?} _renderer\n   */\n  constructor(_config, _elRef, _renderer) {\n    this._config = _config;\n    this._elRef = _elRef;\n    this._renderer = _renderer;\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    if (this.day.isToday && this._config && this._config.customTodayClass) {\n      this._renderer.addClass(this._elRef.nativeElement, this._config.customTodayClass);\n    }\n    if (typeof this.day.customClasses === 'string') {\n      this.day.customClasses.split(' ').filter(\n      /**\n      * @param {?} className\n      * @return {?}\n      */\n      className => className).forEach(\n      /**\n      * @param {?} className\n      * @return {?}\n      */\n      className => {\n        this._renderer.addClass(this._elRef.nativeElement, className);\n      });\n    }\n  }\n}\n\n/** @nocollapse */\n\nif (false) {\n  /** @type {?} */\n  BsDatepickerDayDecoratorComponent.prototype.day;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDatepickerDayDecoratorComponent.prototype._config;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDatepickerDayDecoratorComponent.prototype._elRef;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDatepickerDayDecoratorComponent.prototype._renderer;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * **************\n * @record\n */\nfunction NavigationViewModel() {}\nif (false) {\n  /** @type {?} */\n  NavigationViewModel.prototype.monthTitle;\n  /** @type {?} */\n  NavigationViewModel.prototype.yearTitle;\n  /** @type {?|undefined} */\n  NavigationViewModel.prototype.hideLeftArrow;\n  /** @type {?|undefined} */\n  NavigationViewModel.prototype.hideRightArrow;\n  /** @type {?|undefined} */\n  NavigationViewModel.prototype.disableLeftArrow;\n  /** @type {?|undefined} */\n  NavigationViewModel.prototype.disableRightArrow;\n}\n/**\n * @record\n */\nfunction CalendarCellViewModel() {}\nif (false) {\n  /** @type {?} */\n  CalendarCellViewModel.prototype.date;\n  /** @type {?} */\n  CalendarCellViewModel.prototype.label;\n  /** @type {?|undefined} */\n  CalendarCellViewModel.prototype.isDisabled;\n  /** @type {?|undefined} */\n  CalendarCellViewModel.prototype.isHovered;\n  /** @type {?|undefined} */\n  CalendarCellViewModel.prototype.isSelected;\n}\n/**\n * **************\n * @record\n */\nfunction DayViewModel() {}\nif (false) {\n  /** @type {?|undefined} */\n  DayViewModel.prototype.isOtherMonthHovered;\n  /** @type {?|undefined} */\n  DayViewModel.prototype.isOtherMonth;\n  /** @type {?|undefined} */\n  DayViewModel.prototype.isInRange;\n  /** @type {?|undefined} */\n  DayViewModel.prototype.isSelectionStart;\n  /** @type {?|undefined} */\n  DayViewModel.prototype.isSelectionEnd;\n  /** @type {?|undefined} */\n  DayViewModel.prototype.isToday;\n  /** @type {?|undefined} */\n  DayViewModel.prototype.customClasses;\n  /** @type {?|undefined} */\n  DayViewModel.prototype.monthIndex;\n  /** @type {?|undefined} */\n  DayViewModel.prototype.weekIndex;\n  /** @type {?|undefined} */\n  DayViewModel.prototype.dayIndex;\n}\n/**\n * @record\n */\nfunction WeekViewModel() {}\nif (false) {\n  /** @type {?} */\n  WeekViewModel.prototype.days;\n  /** @type {?|undefined} */\n  WeekViewModel.prototype.isHovered;\n}\n/**\n * @record\n */\nfunction DaysCalendarViewModel() {}\nif (false) {\n  /** @type {?} */\n  DaysCalendarViewModel.prototype.weeks;\n  /** @type {?} */\n  DaysCalendarViewModel.prototype.month;\n  /** @type {?} */\n  DaysCalendarViewModel.prototype.weekNumbers;\n  /** @type {?} */\n  DaysCalendarViewModel.prototype.weekdays;\n}\n/**\n * **************\n * @record\n */\nfunction MonthsCalendarViewModel() {}\nif (false) {\n  /** @type {?} */\n  MonthsCalendarViewModel.prototype.months;\n}\n/**\n * **************\n * @record\n */\nfunction YearsCalendarViewModel() {}\nif (false) {\n  /** @type {?} */\n  YearsCalendarViewModel.prototype.years;\n}\n/**\n * **************\n * @record\n */\nfunction DaysCalendarModel() {}\nif (false) {\n  /** @type {?} */\n  DaysCalendarModel.prototype.daysMatrix;\n  /** @type {?} */\n  DaysCalendarModel.prototype.month;\n}\n/**\n * **************\n * @record\n */\nfunction MonthViewOptions() {}\nif (false) {\n  /** @type {?|undefined} */\n  MonthViewOptions.prototype.width;\n  /** @type {?|undefined} */\n  MonthViewOptions.prototype.height;\n  /** @type {?|undefined} */\n  MonthViewOptions.prototype.firstDayOfWeek;\n}\n/**\n * **************\n * @record\n */\nfunction DatepickerFormatOptions() {}\nif (false) {\n  /** @type {?} */\n  DatepickerFormatOptions.prototype.locale;\n  /** @type {?} */\n  DatepickerFormatOptions.prototype.monthTitle;\n  /** @type {?} */\n  DatepickerFormatOptions.prototype.yearTitle;\n  /** @type {?} */\n  DatepickerFormatOptions.prototype.dayLabel;\n  /** @type {?} */\n  DatepickerFormatOptions.prototype.monthLabel;\n  /** @type {?} */\n  DatepickerFormatOptions.prototype.yearLabel;\n  /** @type {?} */\n  DatepickerFormatOptions.prototype.weekNumbers;\n}\n/**\n * @record\n */\nfunction DatepickerRenderOptions() {}\nif (false) {\n  /** @type {?|undefined} */\n  DatepickerRenderOptions.prototype.showWeekNumbers;\n  /** @type {?|undefined} */\n  DatepickerRenderOptions.prototype.displayMonths;\n}\n/**\n * @record\n */\nfunction DatepickerDateCustomClasses() {}\nif (false) {\n  /** @type {?} */\n  DatepickerDateCustomClasses.prototype.date;\n  /** @type {?} */\n  DatepickerDateCustomClasses.prototype.classes;\n}\n/** @enum {number} */\nconst BsNavigationDirection = {\n  UP: 0,\n  DOWN: 1\n};\nBsNavigationDirection[BsNavigationDirection.UP] = 'UP';\nBsNavigationDirection[BsNavigationDirection.DOWN] = 'DOWN';\n/**\n * @record\n */\nfunction BsNavigationEvent() {}\nif (false) {\n  /** @type {?|undefined} */\n  BsNavigationEvent.prototype.direction;\n  /** @type {?|undefined} */\n  BsNavigationEvent.prototype.step;\n}\n/**\n * @record\n */\nfunction BsViewNavigationEvent() {}\nif (false) {\n  /** @type {?|undefined} */\n  BsViewNavigationEvent.prototype.unit;\n  /** @type {?} */\n  BsViewNavigationEvent.prototype.viewMode;\n}\n/**\n * @record\n */\nfunction CellHoverEvent() {}\nif (false) {\n  /** @type {?} */\n  CellHoverEvent.prototype.cell;\n  /** @type {?} */\n  CellHoverEvent.prototype.isHovered;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass BsDatepickerNavigationViewComponent {\n  constructor() {\n    this.onNavigate = new EventEmitter();\n    this.onViewMode = new EventEmitter();\n  }\n  /**\n   * @param {?} down\n   * @return {?}\n   */\n  navTo(down) {\n    this.onNavigate.emit(down ? BsNavigationDirection.DOWN : BsNavigationDirection.UP);\n  }\n  /**\n   * @param {?} viewMode\n   * @return {?}\n   */\n  view(viewMode) {\n    this.onViewMode.emit(viewMode);\n  }\n}\nif (false) {\n  /** @type {?} */\n  BsDatepickerNavigationViewComponent.prototype.calendar;\n  /** @type {?} */\n  BsDatepickerNavigationViewComponent.prototype.onNavigate;\n  /** @type {?} */\n  BsDatepickerNavigationViewComponent.prototype.onViewMode;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass BsDaysCalendarViewComponent {\n  /**\n   * @param {?} _config\n   */\n  constructor(_config) {\n    this._config = _config;\n    this.onNavigate = new EventEmitter();\n    this.onViewMode = new EventEmitter();\n    this.onSelect = new EventEmitter();\n    this.onHover = new EventEmitter();\n    this.onHoverWeek = new EventEmitter();\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  navigateTo(event) {\n    /** @type {?} */\n    const step = BsNavigationDirection.DOWN === event ? -1 : 1;\n    this.onNavigate.emit({\n      step: {\n        month: step\n      }\n    });\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  changeViewMode(event) {\n    this.onViewMode.emit(event);\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  selectDay(event) {\n    this.onSelect.emit(event);\n  }\n  /**\n   * @param {?} week\n   * @return {?}\n   */\n  selectWeek(week) {\n    if (!this._config.selectWeek && !this._config.selectWeekDateRange) {\n      return;\n    }\n    if (week.days.length === 0) {\n      return;\n    }\n    if (this._config.selectWeek && week.days[0] && !week.days[0].isDisabled && this._config.selectFromOtherMonth) {\n      this.onSelect.emit(week.days[0]);\n      return;\n    }\n    /** @type {?} */\n    const selectedDay = week.days.find(\n    /**\n    * @param {?} day\n    * @return {?}\n    */\n    day => {\n      return this._config.selectFromOtherMonth ? !day.isDisabled : !day.isOtherMonth && !day.isDisabled;\n    });\n    this.onSelect.emit(selectedDay);\n    if (this._config.selectWeekDateRange) {\n      /** @type {?} */\n      const days = week.days.slice(0);\n      /** @type {?} */\n      const lastDayOfRange = days.reverse().find(\n      /**\n      * @param {?} day\n      * @return {?}\n      */\n      day => {\n        return this._config.selectFromOtherMonth ? !day.isDisabled : !day.isOtherMonth && !day.isDisabled;\n      });\n      this.onSelect.emit(lastDayOfRange);\n    }\n  }\n  /**\n   * @param {?} cell\n   * @param {?} isHovered\n   * @return {?}\n   */\n  weekHoverHandler(cell, isHovered) {\n    if (!this._config.selectWeek && !this._config.selectWeekDateRange) {\n      return;\n    }\n    /** @type {?} */\n    const hasActiveDays = cell.days.find(\n    /**\n    * @param {?} day\n    * @return {?}\n    */\n    day => {\n      return this._config.selectFromOtherMonth ? !day.isDisabled : !day.isOtherMonth && !day.isDisabled;\n    });\n    if (hasActiveDays) {\n      cell.isHovered = isHovered;\n      this.isWeekHovered = isHovered;\n      this.onHoverWeek.emit(cell);\n    }\n  }\n  /**\n   * @param {?} cell\n   * @param {?} isHovered\n   * @return {?}\n   */\n  hoverDay(cell, isHovered) {\n    if (this._config.selectFromOtherMonth && cell.isOtherMonth) {\n      cell.isOtherMonthHovered = isHovered;\n    }\n    this.onHover.emit({\n      cell,\n      isHovered\n    });\n  }\n}\n\n/** @nocollapse */\n\nif (false) {\n  /** @type {?} */\n  BsDaysCalendarViewComponent.prototype.calendar;\n  /** @type {?} */\n  BsDaysCalendarViewComponent.prototype.options;\n  /** @type {?} */\n  BsDaysCalendarViewComponent.prototype.onNavigate;\n  /** @type {?} */\n  BsDaysCalendarViewComponent.prototype.onViewMode;\n  /** @type {?} */\n  BsDaysCalendarViewComponent.prototype.onSelect;\n  /** @type {?} */\n  BsDaysCalendarViewComponent.prototype.onHover;\n  /** @type {?} */\n  BsDaysCalendarViewComponent.prototype.onHoverWeek;\n  /** @type {?} */\n  BsDaysCalendarViewComponent.prototype.isWeekHovered;\n  /**\n   * @type {?}\n   * @private\n   */\n  BsDaysCalendarViewComponent.prototype._config;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass BsMonthCalendarViewComponent {\n  constructor() {\n    this.onNavigate = new EventEmitter();\n    this.onViewMode = new EventEmitter();\n    this.onSelect = new EventEmitter();\n    this.onHover = new EventEmitter();\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  navigateTo(event) {\n    /** @type {?} */\n    const step = BsNavigationDirection.DOWN === event ? -1 : 1;\n    this.onNavigate.emit({\n      step: {\n        year: step\n      }\n    });\n  }\n  /**\n   * @param {?} month\n   * @return {?}\n   */\n  viewMonth(month) {\n    this.onSelect.emit(month);\n  }\n  /**\n   * @param {?} cell\n   * @param {?} isHovered\n   * @return {?}\n   */\n  hoverMonth(cell, isHovered) {\n    this.onHover.emit({\n      cell,\n      isHovered\n    });\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  changeViewMode(event) {\n    this.onViewMode.emit(event);\n  }\n}\nif (false) {\n  /** @type {?} */\n  BsMonthCalendarViewComponent.prototype.calendar;\n  /** @type {?} */\n  BsMonthCalendarViewComponent.prototype.onNavigate;\n  /** @type {?} */\n  BsMonthCalendarViewComponent.prototype.onViewMode;\n  /** @type {?} */\n  BsMonthCalendarViewComponent.prototype.onSelect;\n  /** @type {?} */\n  BsMonthCalendarViewComponent.prototype.onHover;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass BsTimepickerViewComponent {\n  constructor() {\n    this.ampm = 'ok';\n    this.hours = 0;\n    this.minutes = 0;\n  }\n}\nif (false) {\n  /** @type {?} */\n  BsTimepickerViewComponent.prototype.ampm;\n  /** @type {?} */\n  BsTimepickerViewComponent.prototype.hours;\n  /** @type {?} */\n  BsTimepickerViewComponent.prototype.minutes;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass BsYearsCalendarViewComponent {\n  constructor() {\n    this.onNavigate = new EventEmitter();\n    this.onViewMode = new EventEmitter();\n    this.onSelect = new EventEmitter();\n    this.onHover = new EventEmitter();\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  navigateTo(event) {\n    /** @type {?} */\n    const step = BsNavigationDirection.DOWN === event ? -1 : 1;\n    this.onNavigate.emit({\n      step: {\n        year: step * yearsPerCalendar\n      }\n    });\n  }\n  /**\n   * @param {?} year\n   * @return {?}\n   */\n  viewYear(year) {\n    this.onSelect.emit(year);\n  }\n  /**\n   * @param {?} cell\n   * @param {?} isHovered\n   * @return {?}\n   */\n  hoverYear(cell, isHovered) {\n    this.onHover.emit({\n      cell,\n      isHovered\n    });\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  changeViewMode(event) {\n    this.onViewMode.emit(event);\n  }\n}\nif (false) {\n  /** @type {?} */\n  BsYearsCalendarViewComponent.prototype.calendar;\n  /** @type {?} */\n  BsYearsCalendarViewComponent.prototype.onNavigate;\n  /** @type {?} */\n  BsYearsCalendarViewComponent.prototype.onViewMode;\n  /** @type {?} */\n  BsYearsCalendarViewComponent.prototype.onSelect;\n  /** @type {?} */\n  BsYearsCalendarViewComponent.prototype.onHover;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass BsDatepickerModule {\n  /**\n   * @return {?}\n   */\n  static forRoot() {\n    return {\n      ngModule: BsDatepickerModule,\n      providers: [ComponentLoaderFactory, PositioningService, BsDatepickerStore, BsDatepickerActions, BsDatepickerConfig, BsDaterangepickerConfig, BsDatepickerInlineConfig, BsDaterangepickerInlineConfig, BsDatepickerEffects, BsLocaleService]\n    };\n  }\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DateFormatter {\n  /**\n   * @param {?} date\n   * @param {?} format\n   * @param {?} locale\n   * @return {?}\n   */\n  format(date, format, locale) {\n    return formatDate(date, format, locale);\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DatePickerInnerComponent {\n  constructor() {\n    this.selectionDone = new EventEmitter(undefined);\n    this.update = new EventEmitter(false);\n    this.activeDateChange = new EventEmitter(undefined);\n    /* tslint:disable-next-line: no-any*/\n    this.stepDay = {};\n    /* tslint:disable-next-line: no-any*/\n    this.stepMonth = {};\n    /* tslint:disable-next-line: no-any*/\n    this.stepYear = {};\n    this.modes = ['day', 'month', 'year'];\n    this.dateFormatter = new DateFormatter();\n  }\n  /**\n   * @return {?}\n   */\n  get activeDate() {\n    return this._activeDate;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set activeDate(value) {\n    this._activeDate = value;\n  }\n  // todo: add formatter value to Date object\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    // todo: use date for unique value\n    this.uniqueId = `datepicker--${Math.floor(Math.random() * 10000)}`;\n    if (this.initDate) {\n      this.activeDate = this.initDate;\n      this.selectedDate = new Date(this.activeDate.valueOf());\n      this.update.emit(this.activeDate);\n    } else if (this.activeDate === undefined) {\n      this.activeDate = new Date();\n    }\n  }\n  // this.refreshView should be called here to reflect the changes on the fly\n  // tslint:disable-next-line:no-unused-variable\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n  ngOnChanges(changes) {\n    this.refreshView();\n    this.checkIfActiveDateGotUpdated(changes.activeDate);\n  }\n  // Check if activeDate has been update and then emit the activeDateChange with the new date\n  /* tslint:disable-next-line: no-any */\n  /**\n   * @param {?} activeDate\n   * @return {?}\n   */\n  checkIfActiveDateGotUpdated(activeDate) {\n    if (activeDate && !activeDate.firstChange) {\n      /** @type {?} */\n      const previousValue = activeDate.previousValue;\n      if (previousValue && previousValue instanceof Date && previousValue.getTime() !== activeDate.currentValue.getTime()) {\n        this.activeDateChange.emit(this.activeDate);\n      }\n    }\n  }\n  /**\n   * @param {?} handler\n   * @param {?} type\n   * @return {?}\n   */\n  setCompareHandler(handler, type) {\n    if (type === 'day') {\n      this.compareHandlerDay = handler;\n    }\n    if (type === 'month') {\n      this.compareHandlerMonth = handler;\n    }\n    if (type === 'year') {\n      this.compareHandlerYear = handler;\n    }\n  }\n  /**\n   * @param {?} date1\n   * @param {?} date2\n   * @return {?}\n   */\n  compare(date1, date2) {\n    if (date1 === undefined || date2 === undefined) {\n      return undefined;\n    }\n    if (this.datepickerMode === 'day' && this.compareHandlerDay) {\n      return this.compareHandlerDay(date1, date2);\n    }\n    if (this.datepickerMode === 'month' && this.compareHandlerMonth) {\n      return this.compareHandlerMonth(date1, date2);\n    }\n    if (this.datepickerMode === 'year' && this.compareHandlerYear) {\n      return this.compareHandlerYear(date1, date2);\n    }\n    return void 0;\n  }\n  /**\n   * @param {?} handler\n   * @param {?} type\n   * @return {?}\n   */\n  setRefreshViewHandler(handler, type) {\n    if (type === 'day') {\n      this.refreshViewHandlerDay = handler;\n    }\n    if (type === 'month') {\n      this.refreshViewHandlerMonth = handler;\n    }\n    if (type === 'year') {\n      this.refreshViewHandlerYear = handler;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  refreshView() {\n    if (this.datepickerMode === 'day' && this.refreshViewHandlerDay) {\n      this.refreshViewHandlerDay();\n    }\n    if (this.datepickerMode === 'month' && this.refreshViewHandlerMonth) {\n      this.refreshViewHandlerMonth();\n    }\n    if (this.datepickerMode === 'year' && this.refreshViewHandlerYear) {\n      this.refreshViewHandlerYear();\n    }\n  }\n  /**\n   * @param {?} date\n   * @param {?} format\n   * @return {?}\n   */\n  dateFilter(date, format) {\n    return this.dateFormatter.format(date, format, this.locale);\n  }\n  /* tslint:disable-next-line: no-any*/\n  /**\n   * @param {?} dateObject\n   * @return {?}\n   */\n  isActive(dateObject) {\n    if (this.compare(dateObject.date, this.activeDate) === 0) {\n      this.activeDateId = dateObject.uid;\n      return true;\n    }\n    return false;\n  }\n  /* tslint:disable-next-line: no-any*/\n  /**\n   * @param {?} date\n   * @param {?} format\n   * @return {?}\n   */\n  createDateObject(date, format) {\n    /* tslint:disable-next-line: no-any*/\n    /** @type {?} */\n    const dateObject = {};\n    dateObject.date = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n    dateObject.date = this.fixTimeZone(dateObject.date);\n    dateObject.label = this.dateFilter(date, format);\n    dateObject.selected = this.compare(date, this.selectedDate) === 0;\n    dateObject.disabled = this.isDisabled(date);\n    dateObject.current = this.compare(date, new Date()) === 0;\n    dateObject.customClass = this.getCustomClassForDate(dateObject.date);\n    return dateObject;\n  }\n  /* tslint:disable-next-line: no-any*/\n  /**\n   * @param {?} arr\n   * @param {?} size\n   * @return {?}\n   */\n  split(arr, size) {\n    /* tslint:disable-next-line: no-any*/\n    /** @type {?} */\n    const arrays = [];\n    while (arr.length > 0) {\n      arrays.push(arr.splice(0, size));\n    }\n    return arrays;\n  }\n  // Fix a hard-reproducible bug with timezones\n  // The bug depends on OS, browser, current timezone and current date\n  // i.e.\n  // var date = new Date(2014, 0, 1);\n  // console.log(date.getFullYear(), date.getMonth(), date.getDate(),\n  // date.getHours()); can result in \"2013 11 31 23\" because of the bug.\n  /**\n   * @param {?} date\n   * @return {?}\n   */\n  fixTimeZone(date) {\n    /** @type {?} */\n    const hours = date.getHours();\n    return new Date(date.getFullYear(), date.getMonth(), date.getDate(), hours === 23 ? hours + 2 : 0);\n  }\n  /**\n   * @param {?} date\n   * @param {?=} isManual\n   * @return {?}\n   */\n  select(date, isManual = true) {\n    if (this.datepickerMode === this.minMode) {\n      if (!this.activeDate) {\n        this.activeDate = new Date(0, 0, 0, 0, 0, 0, 0);\n      }\n      this.activeDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n      this.activeDate = this.fixTimeZone(this.activeDate);\n      if (isManual) {\n        this.selectionDone.emit(this.activeDate);\n      }\n    } else {\n      this.activeDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n      this.activeDate = this.fixTimeZone(this.activeDate);\n      if (isManual) {\n        this.datepickerMode = this.modes[this.modes.indexOf(this.datepickerMode) - 1];\n      }\n    }\n    this.selectedDate = new Date(this.activeDate.valueOf());\n    this.update.emit(this.activeDate);\n    this.refreshView();\n  }\n  /**\n   * @param {?} direction\n   * @return {?}\n   */\n  move(direction) {\n    /* tslint:disable-next-line: no-any*/\n    /** @type {?} */\n    let expectedStep;\n    if (this.datepickerMode === 'day') {\n      expectedStep = this.stepDay;\n    }\n    if (this.datepickerMode === 'month') {\n      expectedStep = this.stepMonth;\n    }\n    if (this.datepickerMode === 'year') {\n      expectedStep = this.stepYear;\n    }\n    if (expectedStep) {\n      /** @type {?} */\n      const year = this.activeDate.getFullYear() + direction * (expectedStep.years || 0);\n      /** @type {?} */\n      const month = this.activeDate.getMonth() + direction * (expectedStep.months || 0);\n      this.activeDate = new Date(year, month, 1);\n      this.refreshView();\n      this.activeDateChange.emit(this.activeDate);\n    }\n  }\n  /**\n   * @param {?} _direction\n   * @return {?}\n   */\n  toggleMode(_direction) {\n    /** @type {?} */\n    const direction = _direction || 1;\n    if (this.datepickerMode === this.maxMode && direction === 1 || this.datepickerMode === this.minMode && direction === -1) {\n      return;\n    }\n    this.datepickerMode = this.modes[this.modes.indexOf(this.datepickerMode) + direction];\n    this.refreshView();\n  }\n  /**\n   * @protected\n   * @param {?} date\n   * @return {?}\n   */\n  getCustomClassForDate(date) {\n    if (!this.customClass) {\n      return '';\n    }\n    // todo: build a hash of custom classes, it will work faster\n    /** @type {?} */\n    const customClassObject = this.customClass.find(\n    /**\n    * @param {?} customClass\n    * @return {?}\n    */\n    customClass => {\n      return customClass.date.valueOf() === date.valueOf() && customClass.mode === this.datepickerMode;\n    }, this);\n    return customClassObject === undefined ? '' : customClassObject.clazz;\n  }\n  /**\n   * @protected\n   * @param {?} date1Disabled\n   * @param {?} date2\n   * @return {?}\n   */\n  compareDateDisabled(date1Disabled, date2) {\n    if (date1Disabled === undefined || date2 === undefined) {\n      return undefined;\n    }\n    if (date1Disabled.mode === 'day' && this.compareHandlerDay) {\n      return this.compareHandlerDay(date1Disabled.date, date2);\n    }\n    if (date1Disabled.mode === 'month' && this.compareHandlerMonth) {\n      return this.compareHandlerMonth(date1Disabled.date, date2);\n    }\n    if (date1Disabled.mode === 'year' && this.compareHandlerYear) {\n      return this.compareHandlerYear(date1Disabled.date, date2);\n    }\n    return undefined;\n  }\n  /**\n   * @protected\n   * @param {?} date\n   * @return {?}\n   */\n  isDisabled(date) {\n    /** @type {?} */\n    let isDateDisabled = false;\n    if (this.dateDisabled) {\n      this.dateDisabled.forEach(\n      /**\n      * @param {?} disabledDate\n      * @return {?}\n      */\n      disabledDate => {\n        if (this.compareDateDisabled(disabledDate, date) === 0) {\n          isDateDisabled = true;\n        }\n      });\n    }\n    if (this.dayDisabled) {\n      isDateDisabled = isDateDisabled || this.dayDisabled.indexOf(date.getDay()) > -1;\n    }\n    return isDateDisabled || this.minDate && this.compare(date, this.minDate) < 0 || this.maxDate && this.compare(date, this.maxDate) > 0;\n  }\n}\nif (false) {\n  /** @type {?} */\n  DatePickerInnerComponent.prototype.locale;\n  /** @type {?} */\n  DatePickerInnerComponent.prototype.datepickerMode;\n  /** @type {?} */\n  DatePickerInnerComponent.prototype.startingDay;\n  /** @type {?} */\n  DatePickerInnerComponent.prototype.yearRange;\n  /** @type {?} */\n  DatePickerInnerComponent.prototype.minDate;\n  /** @type {?} */\n  DatePickerInnerComponent.prototype.maxDate;\n  /** @type {?} */\n  DatePickerInnerComponent.prototype.minMode;\n  /** @type {?} */\n  DatePickerInnerComponent.prototype.maxMode;\n  /** @type {?} */\n  DatePickerInnerComponent.prototype.showWeeks;\n  /** @type {?} */\n  DatePickerInnerComponent.prototype.formatDay;\n  /** @type {?} */\n  DatePickerInnerComponent.prototype.formatMonth;\n  /** @type {?} */\n  DatePickerInnerComponent.prototype.formatYear;\n  /** @type {?} */\n  DatePickerInnerComponent.prototype.formatDayHeader;\n  /** @type {?} */\n  DatePickerInnerComponent.prototype.formatDayTitle;\n  /** @type {?} */\n  DatePickerInnerComponent.prototype.formatMonthTitle;\n  /** @type {?} */\n  DatePickerInnerComponent.prototype.onlyCurrentMonth;\n  /** @type {?} */\n  DatePickerInnerComponent.prototype.shortcutPropagation;\n  /** @type {?} */\n  DatePickerInnerComponent.prototype.customClass;\n  /** @type {?} */\n  DatePickerInnerComponent.prototype.monthColLimit;\n  /** @type {?} */\n  DatePickerInnerComponent.prototype.yearColLimit;\n  /** @type {?} */\n  DatePickerInnerComponent.prototype.dateDisabled;\n  /** @type {?} */\n  DatePickerInnerComponent.prototype.dayDisabled;\n  /** @type {?} */\n  DatePickerInnerComponent.prototype.initDate;\n  /** @type {?} */\n  DatePickerInnerComponent.prototype.selectionDone;\n  /** @type {?} */\n  DatePickerInnerComponent.prototype.update;\n  /** @type {?} */\n  DatePickerInnerComponent.prototype.activeDateChange;\n  /** @type {?} */\n  DatePickerInnerComponent.prototype.stepDay;\n  /** @type {?} */\n  DatePickerInnerComponent.prototype.stepMonth;\n  /** @type {?} */\n  DatePickerInnerComponent.prototype.stepYear;\n  /** @type {?} */\n  DatePickerInnerComponent.prototype.uniqueId;\n  /**\n   * @type {?}\n   * @protected\n   */\n  DatePickerInnerComponent.prototype.modes;\n  /**\n   * @type {?}\n   * @protected\n   */\n  DatePickerInnerComponent.prototype.dateFormatter;\n  /**\n   * @type {?}\n   * @protected\n   */\n  DatePickerInnerComponent.prototype._activeDate;\n  /**\n   * @type {?}\n   * @protected\n   */\n  DatePickerInnerComponent.prototype.selectedDate;\n  /**\n   * @type {?}\n   * @protected\n   */\n  DatePickerInnerComponent.prototype.activeDateId;\n  /**\n   * @type {?}\n   * @protected\n   */\n  DatePickerInnerComponent.prototype.refreshViewHandlerDay;\n  /**\n   * @type {?}\n   * @protected\n   */\n  DatePickerInnerComponent.prototype.compareHandlerDay;\n  /**\n   * @type {?}\n   * @protected\n   */\n  DatePickerInnerComponent.prototype.refreshViewHandlerMonth;\n  /**\n   * @type {?}\n   * @protected\n   */\n  DatePickerInnerComponent.prototype.compareHandlerMonth;\n  /**\n   * @type {?}\n   * @protected\n   */\n  DatePickerInnerComponent.prototype.refreshViewHandlerYear;\n  /**\n   * @type {?}\n   * @protected\n   */\n  DatePickerInnerComponent.prototype.compareHandlerYear;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DatepickerConfig {\n  constructor() {\n    this.locale = 'en';\n    this.datepickerMode = 'day';\n    this.startingDay = 0;\n    this.yearRange = 20;\n    this.minMode = 'day';\n    this.maxMode = 'year';\n    this.showWeeks = true;\n    this.formatDay = 'DD';\n    this.formatMonth = 'MMMM';\n    this.formatYear = 'YYYY';\n    this.formatDayHeader = 'dd';\n    this.formatDayTitle = 'MMMM YYYY';\n    this.formatMonthTitle = 'YYYY';\n    this.onlyCurrentMonth = false;\n    this.monthColLimit = 3;\n    this.yearColLimit = 5;\n    this.shortcutPropagation = false;\n  }\n}\nif (false) {\n  /** @type {?} */\n  DatepickerConfig.prototype.locale;\n  /** @type {?} */\n  DatepickerConfig.prototype.datepickerMode;\n  /** @type {?} */\n  DatepickerConfig.prototype.startingDay;\n  /** @type {?} */\n  DatepickerConfig.prototype.yearRange;\n  /** @type {?} */\n  DatepickerConfig.prototype.minMode;\n  /** @type {?} */\n  DatepickerConfig.prototype.maxMode;\n  /** @type {?} */\n  DatepickerConfig.prototype.showWeeks;\n  /** @type {?} */\n  DatepickerConfig.prototype.formatDay;\n  /** @type {?} */\n  DatepickerConfig.prototype.formatMonth;\n  /** @type {?} */\n  DatepickerConfig.prototype.formatYear;\n  /** @type {?} */\n  DatepickerConfig.prototype.formatDayHeader;\n  /** @type {?} */\n  DatepickerConfig.prototype.formatDayTitle;\n  /** @type {?} */\n  DatepickerConfig.prototype.formatMonthTitle;\n  /** @type {?} */\n  DatepickerConfig.prototype.onlyCurrentMonth;\n  /** @type {?} */\n  DatepickerConfig.prototype.monthColLimit;\n  /** @type {?} */\n  DatepickerConfig.prototype.yearColLimit;\n  /** @type {?} */\n  DatepickerConfig.prototype.shortcutPropagation;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst DATEPICKER_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(\n  /**\n  * @return {?}\n  */\n  () => DatePickerComponent),\n  multi: true\n};\n/* tslint:disable:component-selector-name component-selector-type */\n/* tslint:enable:component-selector-name component-selector-type */\nclass DatePickerComponent {\n  /**\n   * @param {?} config\n   */\n  constructor(config) {\n    /**\n     * sets datepicker mode, supports: `day`, `month`, `year`\n     */\n    this.datepickerMode = 'day';\n    /**\n     * if false week numbers will be hidden\n     */\n    this.showWeeks = true;\n    this.selectionDone = new EventEmitter(undefined);\n    /**\n     * callback to invoke when the activeDate is changed.\n     */\n    this.activeDateChange = new EventEmitter(undefined);\n    /* tslint:disable-next-line: no-any*/\n    this.onChange = Function.prototype;\n    /* tslint:disable-next-line: no-any*/\n    this.onTouched = Function.prototype;\n    this._now = new Date();\n    this.config = config;\n    this.configureOptions();\n  }\n  /**\n   * currently active date\n   * @return {?}\n   */\n  get activeDate() {\n    return this._activeDate || this._now;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set activeDate(value) {\n    this._activeDate = value;\n  }\n  /**\n   * @return {?}\n   */\n  configureOptions() {\n    Object.assign(this, this.config);\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  onUpdate(event) {\n    this.activeDate = event;\n    this.onChange(event);\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  onSelectionDone(event) {\n    this.selectionDone.emit(event);\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  onActiveDateChange(event) {\n    this.activeDateChange.emit(event);\n  }\n  // todo: support null value\n  /* tslint:disable-next-line: no-any*/\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  writeValue(value) {\n    if (this._datePicker.compare(value, this._activeDate) === 0) {\n      return;\n    }\n    if (value && value instanceof Date) {\n      this.activeDate = value;\n      this._datePicker.select(value, false);\n      return;\n    }\n    this.activeDate = value ? new Date(value) : void 0;\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n}\n\n/** @nocollapse */\n\nif (false) {\n  /**\n   * sets datepicker mode, supports: `day`, `month`, `year`\n   * @type {?}\n   */\n  DatePickerComponent.prototype.datepickerMode;\n  /**\n   * default date to show if `ng-model` value is not specified\n   * @type {?}\n   */\n  DatePickerComponent.prototype.initDate;\n  /**\n   * oldest selectable date\n   * @type {?}\n   */\n  DatePickerComponent.prototype.minDate;\n  /**\n   * latest selectable date\n   * @type {?}\n   */\n  DatePickerComponent.prototype.maxDate;\n  /**\n   * set lower datepicker mode, supports: `day`, `month`, `year`\n   * @type {?}\n   */\n  DatePickerComponent.prototype.minMode;\n  /**\n   * sets upper datepicker mode, supports: `day`, `month`, `year`\n   * @type {?}\n   */\n  DatePickerComponent.prototype.maxMode;\n  /**\n   * if false week numbers will be hidden\n   * @type {?}\n   */\n  DatePickerComponent.prototype.showWeeks;\n  /**\n   * format of day in month\n   * @type {?}\n   */\n  DatePickerComponent.prototype.formatDay;\n  /**\n   * format of month in year\n   * @type {?}\n   */\n  DatePickerComponent.prototype.formatMonth;\n  /**\n   * format of year in year range\n   * @type {?}\n   */\n  DatePickerComponent.prototype.formatYear;\n  /**\n   * format of day in week header\n   * @type {?}\n   */\n  DatePickerComponent.prototype.formatDayHeader;\n  /**\n   * format of title when selecting day\n   * @type {?}\n   */\n  DatePickerComponent.prototype.formatDayTitle;\n  /**\n   * format of title when selecting month\n   * @type {?}\n   */\n  DatePickerComponent.prototype.formatMonthTitle;\n  /**\n   * starting day of the week from 0-6 (0=Sunday, ..., 6=Saturday)\n   * @type {?}\n   */\n  DatePickerComponent.prototype.startingDay;\n  /**\n   * number of years displayed in year selection\n   * @type {?}\n   */\n  DatePickerComponent.prototype.yearRange;\n  /**\n   * if true only dates from the currently displayed month will be shown\n   * @type {?}\n   */\n  DatePickerComponent.prototype.onlyCurrentMonth;\n  /**\n   * if true shortcut`s event propagation will be disabled\n   * @type {?}\n   */\n  DatePickerComponent.prototype.shortcutPropagation;\n  /**\n   * number of months displayed in a single row of month picker\n   * @type {?}\n   */\n  DatePickerComponent.prototype.monthColLimit;\n  /**\n   * number of years displayed in a single row of year picker\n   * @type {?}\n   */\n  DatePickerComponent.prototype.yearColLimit;\n  /**\n   * array of custom css classes to be applied to targeted dates\n   * @type {?}\n   */\n  DatePickerComponent.prototype.customClass;\n  /**\n   * array of disabled dates\n   * @type {?}\n   */\n  DatePickerComponent.prototype.dateDisabled;\n  /**\n   * disabled days of the week from 0-6 (0=Sunday, ..., 6=Saturday)\n   * @type {?}\n   */\n  DatePickerComponent.prototype.dayDisabled;\n  /** @type {?} */\n  DatePickerComponent.prototype.selectionDone;\n  /**\n   * callback to invoke when the activeDate is changed.\n   * @type {?}\n   */\n  DatePickerComponent.prototype.activeDateChange;\n  /** @type {?} */\n  DatePickerComponent.prototype._datePicker;\n  /** @type {?} */\n  DatePickerComponent.prototype.onChange;\n  /** @type {?} */\n  DatePickerComponent.prototype.onTouched;\n  /** @type {?} */\n  DatePickerComponent.prototype.config;\n  /**\n   * @type {?}\n   * @protected\n   */\n  DatePickerComponent.prototype._now;\n  /**\n   * @type {?}\n   * @protected\n   */\n  DatePickerComponent.prototype._activeDate;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DayPickerComponent {\n  /**\n   * @param {?} datePicker\n   */\n  constructor(datePicker) {\n    this.labels = [];\n    this.rows = [];\n    this.weekNumbers = [];\n    this.datePicker = datePicker;\n  }\n  /**\n   * @return {?}\n   */\n  get isBs4() {\n    return !isBs3();\n  }\n  /*protected getDaysInMonth(year:number, month:number) {\n     return ((month === 1) && (year % 4 === 0) &&\n     ((year % 100 !== 0) || (year % 400 === 0))) ? 29 : DAYS_IN_MONTH[month];\n     }*/\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    /** @type {?} */\n    const self = this;\n    this.datePicker.stepDay = {\n      months: 1\n    };\n    this.datePicker.setRefreshViewHandler(\n    /**\n    * @return {?}\n    */\n    function () {\n      /** @type {?} */\n      const year = this.activeDate.getFullYear();\n      /** @type {?} */\n      const month = this.activeDate.getMonth();\n      /** @type {?} */\n      const firstDayOfMonth = new Date(year, month, 1);\n      /** @type {?} */\n      const difference = this.startingDay - firstDayOfMonth.getDay();\n      /** @type {?} */\n      const numDisplayedFromPreviousMonth = difference > 0 ? 7 - difference : -difference;\n      /** @type {?} */\n      const firstDate = new Date(firstDayOfMonth.getTime());\n      if (numDisplayedFromPreviousMonth > 0) {\n        firstDate.setDate(-numDisplayedFromPreviousMonth + 1);\n      }\n      // 42 is the number of days on a six-week calendar\n      /** @type {?} */\n      const _days = self.getDates(firstDate, 42);\n      /** @type {?} */\n      const days = [];\n      for (let i = 0; i < 42; i++) {\n        /** @type {?} */\n        const _dateObject = this.createDateObject(_days[i], this.formatDay);\n        _dateObject.secondary = _days[i].getMonth() !== month;\n        _dateObject.uid = this.uniqueId + '-' + i;\n        days[i] = _dateObject;\n      }\n      self.labels = [];\n      for (let j = 0; j < 7; j++) {\n        self.labels[j] = {};\n        self.labels[j].abbr = this.dateFilter(days[j].date, this.formatDayHeader);\n        self.labels[j].full = this.dateFilter(days[j].date, 'EEEE');\n      }\n      self.title = this.dateFilter(this.activeDate, this.formatDayTitle);\n      self.rows = this.split(days, 7);\n      if (this.showWeeks) {\n        self.weekNumbers = [];\n        /** @type {?} */\n        const thursdayIndex = (4 + 7 - this.startingDay) % 7;\n        /** @type {?} */\n        const numWeeks = self.rows.length;\n        for (let curWeek = 0; curWeek < numWeeks; curWeek++) {\n          self.weekNumbers.push(self.getISO8601WeekNumber(self.rows[curWeek][thursdayIndex].date));\n        }\n      }\n    }, 'day');\n    this.datePicker.setCompareHandler(\n    /**\n    * @param {?} date1\n    * @param {?} date2\n    * @return {?}\n    */\n    function (date1, date2) {\n      /** @type {?} */\n      const d1 = new Date(date1.getFullYear(), date1.getMonth(), date1.getDate());\n      /** @type {?} */\n      const d2 = new Date(date2.getFullYear(), date2.getMonth(), date2.getDate());\n      return d1.getTime() - d2.getTime();\n    }, 'day');\n    this.datePicker.refreshView();\n  }\n  /**\n   * @protected\n   * @param {?} startDate\n   * @param {?} n\n   * @return {?}\n   */\n  getDates(startDate, n) {\n    /** @type {?} */\n    const dates = new Array(n);\n    /** @type {?} */\n    let current = new Date(startDate.getTime());\n    /** @type {?} */\n    let i = 0;\n    /** @type {?} */\n    let date;\n    while (i < n) {\n      date = new Date(current.getTime());\n      date = this.datePicker.fixTimeZone(date);\n      dates[i++] = date;\n      current = new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1);\n    }\n    return dates;\n  }\n  /**\n   * @protected\n   * @param {?} date\n   * @return {?}\n   */\n  getISO8601WeekNumber(date) {\n    /** @type {?} */\n    const checkDate = new Date(date.getTime());\n    // Thursday\n    checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));\n    /** @type {?} */\n    const time = checkDate.getTime();\n    // Compare with Jan 1\n    checkDate.setMonth(0);\n    checkDate.setDate(1);\n    return Math.floor(Math.round((time - checkDate.getTime()) / 86400000) / 7) + 1;\n  }\n}\n\n/** @nocollapse */\n\nif (false) {\n  /** @type {?} */\n  DayPickerComponent.prototype.labels;\n  /** @type {?} */\n  DayPickerComponent.prototype.title;\n  /** @type {?} */\n  DayPickerComponent.prototype.rows;\n  /** @type {?} */\n  DayPickerComponent.prototype.weekNumbers;\n  /** @type {?} */\n  DayPickerComponent.prototype.datePicker;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MonthPickerComponent {\n  /**\n   * @param {?} datePicker\n   */\n  constructor(datePicker) {\n    this.rows = [];\n    this.datePicker = datePicker;\n  }\n  /**\n   * @return {?}\n   */\n  get isBs4() {\n    return !isBs3();\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    /** @type {?} */\n    const self = this;\n    this.datePicker.stepMonth = {\n      years: 1\n    };\n    this.datePicker.setRefreshViewHandler(\n    /**\n    * @return {?}\n    */\n    function () {\n      /** @type {?} */\n      const months = new Array(12);\n      /** @type {?} */\n      const year = this.activeDate.getFullYear();\n      /** @type {?} */\n      let date;\n      for (let i = 0; i < 12; i++) {\n        date = new Date(year, i, 1);\n        date = this.fixTimeZone(date);\n        months[i] = this.createDateObject(date, this.formatMonth);\n        months[i].uid = this.uniqueId + '-' + i;\n      }\n      self.title = this.dateFilter(this.activeDate, this.formatMonthTitle);\n      self.rows = this.split(months, self.datePicker.monthColLimit);\n    }, 'month');\n    this.datePicker.setCompareHandler(\n    /**\n    * @param {?} date1\n    * @param {?} date2\n    * @return {?}\n    */\n    function (date1, date2) {\n      /** @type {?} */\n      const d1 = new Date(date1.getFullYear(), date1.getMonth());\n      /** @type {?} */\n      const d2 = new Date(date2.getFullYear(), date2.getMonth());\n      return d1.getTime() - d2.getTime();\n    }, 'month');\n    this.datePicker.refreshView();\n  }\n}\n\n/** @nocollapse */\n\nif (false) {\n  /** @type {?} */\n  MonthPickerComponent.prototype.title;\n  /** @type {?} */\n  MonthPickerComponent.prototype.rows;\n  /** @type {?} */\n  MonthPickerComponent.prototype.datePicker;\n  /** @type {?} */\n  MonthPickerComponent.prototype.maxMode;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass YearPickerComponent {\n  /**\n   * @param {?} datePicker\n   */\n  constructor(datePicker) {\n    this.rows = [];\n    this.datePicker = datePicker;\n  }\n  /**\n   * @return {?}\n   */\n  get isBs4() {\n    return !isBs3();\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    /** @type {?} */\n    const self = this;\n    this.datePicker.stepYear = {\n      years: this.datePicker.yearRange\n    };\n    this.datePicker.setRefreshViewHandler(\n    /**\n    * @return {?}\n    */\n    function () {\n      /** @type {?} */\n      const years = new Array(this.yearRange);\n      /** @type {?} */\n      let date;\n      /** @type {?} */\n      const start = self.getStartingYear(this.activeDate.getFullYear());\n      for (let i = 0; i < this.yearRange; i++) {\n        date = new Date(start + i, 0, 1);\n        date = this.fixTimeZone(date);\n        years[i] = this.createDateObject(date, this.formatYear);\n        years[i].uid = this.uniqueId + '-' + i;\n      }\n      self.title = [years[0].label, years[this.yearRange - 1].label].join(' - ');\n      self.rows = this.split(years, self.datePicker.yearColLimit);\n    }, 'year');\n    this.datePicker.setCompareHandler(\n    /**\n    * @param {?} date1\n    * @param {?} date2\n    * @return {?}\n    */\n    function (date1, date2) {\n      return date1.getFullYear() - date2.getFullYear();\n    }, 'year');\n    this.datePicker.refreshView();\n  }\n  /**\n   * @protected\n   * @param {?} year\n   * @return {?}\n   */\n  getStartingYear(year) {\n    // todo: parseInt\n    return (year - 1) / this.datePicker.yearRange * this.datePicker.yearRange + 1;\n  }\n}\n\n/** @nocollapse */\n\nif (false) {\n  /** @type {?} */\n  YearPickerComponent.prototype.datePicker;\n  /** @type {?} */\n  YearPickerComponent.prototype.title;\n  /** @type {?} */\n  YearPickerComponent.prototype.rows;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DatepickerModule {\n  /**\n   * @return {?}\n   */\n  static forRoot() {\n    return {\n      ngModule: DatepickerModule,\n      providers: [DatepickerConfig]\n    };\n  }\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nexport { BsDatepickerConfig, BsDatepickerContainerComponent, BsDatepickerDirective, BsDatepickerInlineConfig, BsDatepickerInlineContainerComponent, BsDatepickerInlineDirective, BsDatepickerInputDirective, BsDatepickerModule, BsDaterangepickerConfig, BsDaterangepickerContainerComponent, BsDaterangepickerDirective, BsDaterangepickerInlineConfig, BsDaterangepickerInlineContainerComponent, BsDaterangepickerInlineDirective, BsDaterangepickerInputDirective, BsLocaleService, DateFormatter, DatePickerComponent, DatePickerInnerComponent, DatepickerConfig, DatepickerModule, DayPickerComponent, MonthPickerComponent, YearPickerComponent, DATEPICKER_CONTROL_VALUE_ACCESSOR as ɵa, BsDatepickerAbstractComponent as ɵb, BsDatepickerStore as ɵc, BsDatepickerEffects as ɵd, BsDatepickerActions as ɵe, datepickerAnimation as ɵf, BsCalendarLayoutComponent as ɵg, BsCurrentDateViewComponent as ɵh, BsCustomDatesViewComponent as ɵi, BsDatepickerDayDecoratorComponent as ɵj, BsDatepickerNavigationViewComponent as ɵk, BsDaysCalendarViewComponent as ɵl, BsMonthCalendarViewComponent as ɵm, BsTimepickerViewComponent as ɵn, BsYearsCalendarViewComponent as ɵo };\n//# sourceMappingURL=ngx-bootstrap-datepicker.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}