{"ast":null,"code":"import { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { inject, ElementRef, Directive, Inject, Component, ViewEncapsulation, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { Subject, merge } from 'rxjs';\nimport { filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\nimport * as i2 from '@angular/cdk/scrolling';\nimport { trigger, transition, style, animate } from '@angular/animations';\nconst _c0 = [\"*\"];\nlet NgxNavbarDynamicExpandDirective = /*#__PURE__*/(() => {\n  class NgxNavbarDynamicExpandDirective {\n    constructor(ngZone, platform, _document, viewportRuler, cdRef) {\n      this.ngZone = ngZone;\n      this.platform = platform;\n      this._document = _document;\n      this.onDestroy$ = new Subject();\n      this.update$ = new Subject();\n      this.nativeElement = inject(ElementRef).nativeElement;\n      this.loaded = false;\n      this._isExpanded = false;\n      ngZone.runOutsideAngular(() => {\n        merge(viewportRuler.change(150), this.update$).pipe(filter(() => this.loaded || (this.loaded = checkBootstrapStylesAreLoaded(_document, this.nativeElement))), map(() => {\n          const element = this.nativeElement;\n          let overflowSize;\n          if (this.isExpanded) {\n            overflowSize = element.scrollWidth - element.offsetWidth;\n          } else {\n            const clone = element.cloneNode(true);\n            clone.classList.add('navbar-expand');\n            const parent = element.parentElement;\n            if (parent) {\n              parent.appendChild(clone);\n              overflowSize = clone.scrollWidth - clone.offsetWidth;\n              parent.removeChild(clone);\n            }\n          }\n          return !overflowSize;\n        }), distinctUntilChanged(), takeUntil(this.onDestroy$)).subscribe(isExpanded => {\n          ngZone.run(() => {\n            this._isExpanded = isExpanded;\n            cdRef.markForCheck();\n          });\n        });\n      });\n    }\n    get isExpanded() {\n      return this._isExpanded;\n    }\n    ngAfterContentInit() {\n      if (!this.platform.isBrowser) {\n        return;\n      }\n      this.ngZone.runOutsideAngular(() => {\n        this.loaded = checkBootstrapStylesAreLoaded(this._document, this.nativeElement);\n        if (this.loaded) {\n          this.update$.next();\n        } else {\n          setTimeout(() => {\n            this.ngAfterContentInit();\n          }, 1000 / 60);\n        }\n      });\n    }\n    ngOnDestroy() {\n      this.update$.complete();\n      this.onDestroy$.next();\n      this.onDestroy$.complete();\n    }\n  }\n  NgxNavbarDynamicExpandDirective.ɵfac = function NgxNavbarDynamicExpandDirective_Factory(t) {\n    return new (t || NgxNavbarDynamicExpandDirective)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.Platform), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i2.ViewportRuler), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  NgxNavbarDynamicExpandDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: NgxNavbarDynamicExpandDirective,\n    selectors: [[\"\", \"ngxNavbarDynamicExpand\", \"\"]],\n    hostAttrs: [1, \"navbar\", \"text-nowrap\"],\n    hostVars: 2,\n    hostBindings: function NgxNavbarDynamicExpandDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"navbar-expand\", ctx.isExpanded);\n      }\n    }\n  });\n  return NgxNavbarDynamicExpandDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction checkBootstrapStylesAreLoaded(document, element) {\n  const documentWindow = document.defaultView || window;\n  const computedStyle = documentWindow && documentWindow.getComputedStyle ? documentWindow.getComputedStyle(element) : false;\n  return computedStyle && computedStyle.whiteSpace === 'nowrap';\n}\n\n/** Time and timing curve for navbar animations. */\nconst NAVBAR_ANIMATION_TIMING = '300ms ease-out';\nconst ngxNavbarAnimations = {\n  navbarSlide: trigger('slideState', [transition('false => true', [style({\n    opacity: 0,\n    height: 0,\n    overflow: 'hidden'\n  }), animate(NAVBAR_ANIMATION_TIMING, style({\n    opacity: 1,\n    height: '*'\n  }))]), transition('true => false', [animate(NAVBAR_ANIMATION_TIMING, style({\n    display: 'block',\n    opacity: 0,\n    height: 0,\n    overflow: 'hidden'\n  }))])])\n};\nlet NgxNavbarCollapseComponent = /*#__PURE__*/(() => {\n  class NgxNavbarCollapseComponent {\n    constructor() {\n      this.isCollapsed = true;\n      this.isTransitioning = false;\n      this.nativeElement = inject(ElementRef).nativeElement;\n      this.updateClasses();\n    }\n    toggle() {\n      this.isTransitioning = true;\n      this.isCollapsed = !this.isCollapsed;\n      this.updateClasses();\n    }\n    close() {\n      if (this.isCollapsed) {\n        return;\n      }\n      this.isTransitioning = true;\n      this.isCollapsed = true;\n      this.updateClasses();\n    }\n    open() {\n      if (!this.isCollapsed) {\n        return;\n      }\n      this.isTransitioning = true;\n      this.isCollapsed = false;\n      this.updateClasses();\n    }\n    done() {\n      this.isTransitioning = false;\n      this.updateClasses();\n    }\n    updateClasses() {\n      const classList = this.nativeElement.classList;\n      const isTransitioning = this.isTransitioning;\n      classList.toggle('collapse', !isTransitioning);\n      classList.toggle('show', !this.isCollapsed && !isTransitioning);\n      classList.toggle('collapsing', isTransitioning);\n    }\n  }\n  NgxNavbarCollapseComponent.ɵfac = function NgxNavbarCollapseComponent_Factory(t) {\n    return new (t || NgxNavbarCollapseComponent)();\n  };\n  NgxNavbarCollapseComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NgxNavbarCollapseComponent,\n    selectors: [[\"ngx-navbar-collapse\"]],\n    hostAttrs: [1, \"navbar-collapse\", \"ngx-navbar-collapse\"],\n    hostVars: 1,\n    hostBindings: function NgxNavbarCollapseComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵsyntheticHostListener(\"@slideState.done\", function NgxNavbarCollapseComponent_animation_slideState_done_HostBindingHandler() {\n          return ctx.done();\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵsyntheticHostProperty(\"@slideState\", !ctx.isCollapsed);\n      }\n    },\n    exportAs: [\"ngxNavbarCollapse\"],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function NgxNavbarCollapseComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    },\n    styles: [\".ngx-navbar-collapse.collapsing{height:auto}\\n\"],\n    encapsulation: 2,\n    data: {\n      animation: [ngxNavbarAnimations.navbarSlide]\n    },\n    changeDetection: 0\n  });\n  return NgxNavbarCollapseComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet NgxNavbarModule = /*#__PURE__*/(() => {\n  class NgxNavbarModule {}\n  NgxNavbarModule.ɵfac = function NgxNavbarModule_Factory(t) {\n    return new (t || NgxNavbarModule)();\n  };\n  NgxNavbarModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgxNavbarModule\n  });\n  NgxNavbarModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n  return NgxNavbarModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\r\n * Public API Surface of ngx-bootstrap-navbar\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NAVBAR_ANIMATION_TIMING, NgxNavbarCollapseComponent, NgxNavbarDynamicExpandDirective, NgxNavbarModule, ngxNavbarAnimations };\n//# sourceMappingURL=ngx-bootstrap-navbar.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}