{"ast":null,"code":"import { Injectable, Component, Input, HostBinding, ElementRef, Host, Renderer2, NgModule } from '@angular/core';\nimport { isBs3 } from 'ngx-bootstrap/utils';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ProgressbarConfig {\n  constructor() {\n    /**\n     * if `true` changing value of progress bar will be animated\n     */\n    this.animate = false;\n    /**\n     * maximum total value of progress element\n     */\n    this.max = 100;\n  }\n}\nif (false) {\n  /**\n   * if `true` changing value of progress bar will be animated\n   * @type {?}\n   */\n  ProgressbarConfig.prototype.animate;\n  /**\n   * maximum total value of progress element\n   * @type {?}\n   */\n  ProgressbarConfig.prototype.max;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ProgressbarComponent {\n  /**\n   * @param {?} config\n   */\n  constructor(config) {\n    this.isStacked = false;\n    this.addClass = true;\n    /* tslint:disable-next-line:no-any */\n    this.bars = [];\n    this._max = 100;\n    Object.assign(this, config);\n  }\n  /**\n   * if `true` changing value of progress bar will be animated\n   * @param {?} value\n   * @return {?}\n   */\n  set animate(value) {\n    this._animate = value;\n    this.bars.forEach(\n    /**\n    * @param {?} b\n    * @return {?}\n    */\n    b => {\n      b.animate = value;\n    });\n  }\n  /**\n   * If `true`, striped classes are applied\n   * @param {?} value\n   * @return {?}\n   */\n  set striped(value) {\n    this._striped = value;\n    this.bars.forEach(\n    /**\n    * @param {?} b\n    * @return {?}\n    */\n    b => {\n      b.striped = value;\n    });\n  }\n  /**\n   * current value of progress bar. Could be a number or array of objects\n   * like {\"value\":15,\"type\":\"info\",\"label\":\"15 %\"}\n   * @param {?} value\n   * @return {?}\n   */\n  set value(value) {\n    this.isStacked = Array.isArray(value);\n    this._value = value;\n  }\n  /**\n   * @return {?}\n   */\n  get isBs3() {\n    return isBs3();\n  }\n  /**\n   * maximum total value of progress element\n   * @return {?}\n   */\n  get max() {\n    return this._max;\n  }\n  /**\n   * @param {?} v\n   * @return {?}\n   */\n  set max(v) {\n    this._max = v;\n    this.bars.forEach(\n    /**\n    * @param {?} bar\n    * @return {?}\n    */\n    bar => {\n      bar.recalculatePercentage();\n    });\n  }\n  /**\n   * @param {?} bar\n   * @return {?}\n   */\n  addBar(bar) {\n    bar.animate = this._animate;\n    bar.striped = this._striped;\n    this.bars.push(bar);\n  }\n  /**\n   * @param {?} bar\n   * @return {?}\n   */\n  removeBar(bar) {\n    this.bars.splice(this.bars.indexOf(bar), 1);\n  }\n}\n\n/** @nocollapse */\n\nif (false) {\n  /**\n   * provide one of the four supported contextual classes: `success`, `info`, `warning`, `danger`\n   * @type {?}\n   */\n  ProgressbarComponent.prototype.type;\n  /** @type {?} */\n  ProgressbarComponent.prototype.isStacked;\n  /** @type {?} */\n  ProgressbarComponent.prototype._striped;\n  /** @type {?} */\n  ProgressbarComponent.prototype._animate;\n  /** @type {?} */\n  ProgressbarComponent.prototype._value;\n  /** @type {?} */\n  ProgressbarComponent.prototype.addClass;\n  /** @type {?} */\n  ProgressbarComponent.prototype.bars;\n  /**\n   * @type {?}\n   * @protected\n   */\n  ProgressbarComponent.prototype._max;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// todo: number pipe\n// todo: use query from progress?\nclass BarComponent {\n  /**\n   * @param {?} el\n   * @param {?} progress\n   * @param {?} renderer\n   */\n  constructor(el, progress, renderer) {\n    this.el = el;\n    this.renderer = renderer;\n    this.addClass = true;\n    this.percent = 0;\n    this.progress = progress;\n  }\n  /**\n   * provide one of the four supported contextual classes: `success`, `info`, `warning`, `danger`\n   * @return {?}\n   */\n  get type() {\n    return this._type;\n  }\n  /**\n   * @param {?} v\n   * @return {?}\n   */\n  set type(v) {\n    this._type = v;\n    this.applyTypeClasses();\n  }\n  /**\n   * current value of progress bar\n   * @return {?}\n   */\n  get value() {\n    return this._value;\n  }\n  /**\n   * @param {?} v\n   * @return {?}\n   */\n  set value(v) {\n    if (!v && v !== 0) {\n      return;\n    }\n    this._value = v;\n    this.recalculatePercentage();\n  }\n  /**\n   * @return {?}\n   */\n  get setBarWidth() {\n    this.recalculatePercentage();\n    return this.percent;\n  }\n  /**\n   * @return {?}\n   */\n  get isBs3() {\n    return isBs3();\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    this.progress.addBar(this);\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this.progress.removeBar(this);\n  }\n  /**\n   * @return {?}\n   */\n  recalculatePercentage() {\n    this.percent = +(this.value / this.progress.max * 100).toFixed(2);\n    /** @type {?} */\n    const totalPercentage = this.progress.bars.reduce(\n    /**\n    * @param {?} total\n    * @param {?} bar\n    * @return {?}\n    */\n    function (total, bar) {\n      return total + bar.percent;\n    }, 0);\n    if (totalPercentage > 100) {\n      this.percent -= totalPercentage - 100;\n    }\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  applyTypeClasses() {\n    if (this._prevType) {\n      /** @type {?} */\n      const barTypeClass = `progress-bar-${this._prevType}`;\n      /** @type {?} */\n      const bgClass = `bg-${this._prevType}`;\n      this.renderer.removeClass(this.el.nativeElement, barTypeClass);\n      this.renderer.removeClass(this.el.nativeElement, bgClass);\n      this._prevType = null;\n    }\n    if (this._type) {\n      /** @type {?} */\n      const barTypeClass = `progress-bar-${this._type}`;\n      /** @type {?} */\n      const bgClass = `bg-${this._type}`;\n      this.renderer.addClass(this.el.nativeElement, barTypeClass);\n      this.renderer.addClass(this.el.nativeElement, bgClass);\n      this._prevType = this._type;\n    }\n  }\n}\n\n/** @nocollapse */\n\nif (false) {\n  /** @type {?} */\n  BarComponent.prototype.max;\n  /** @type {?} */\n  BarComponent.prototype.addClass;\n  /** @type {?} */\n  BarComponent.prototype.striped;\n  /** @type {?} */\n  BarComponent.prototype.animate;\n  /** @type {?} */\n  BarComponent.prototype.percent;\n  /** @type {?} */\n  BarComponent.prototype.progress;\n  /**\n   * @type {?}\n   * @protected\n   */\n  BarComponent.prototype._value;\n  /**\n   * @type {?}\n   * @protected\n   */\n  BarComponent.prototype._type;\n  /**\n   * @type {?}\n   * @private\n   */\n  BarComponent.prototype._prevType;\n  /**\n   * @type {?}\n   * @private\n   */\n  BarComponent.prototype.el;\n  /**\n   * @type {?}\n   * @private\n   */\n  BarComponent.prototype.renderer;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ProgressbarModule {\n  /**\n   * @return {?}\n   */\n  static forRoot() {\n    return {\n      ngModule: ProgressbarModule,\n      providers: [ProgressbarConfig]\n    };\n  }\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nexport { BarComponent, ProgressbarComponent, ProgressbarConfig, ProgressbarModule };\n//# sourceMappingURL=ngx-bootstrap-progressbar.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}