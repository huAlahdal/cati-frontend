{"ast":null,"code":"import { ESCAPE } from '@angular/cdk/keycodes';\nimport { Subject, Subscription } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\nvar OwlDialogRef = function () {\n  function OwlDialogRef(overlayRef, container, id, location) {\n    var _this = this;\n    this.overlayRef = overlayRef;\n    this.container = container;\n    this.id = id;\n    this._beforeClose$ = new Subject();\n    this._afterOpen$ = new Subject();\n    this._afterClosed$ = new Subject();\n    this.locationChanged = Subscription.EMPTY;\n    this.disableClose = this.container.config.disableClose;\n    this.container.animationStateChanged.pipe(filter(function (event) {\n      return event.phaseName === 'done' && event.toState === 'enter';\n    }), take(1)).subscribe(function () {\n      _this._afterOpen$.next();\n      _this._afterOpen$.complete();\n    });\n    this.container.animationStateChanged.pipe(filter(function (event) {\n      return event.phaseName === 'done' && event.toState === 'exit';\n    }), take(1)).subscribe(function () {\n      _this.overlayRef.dispose();\n      _this.locationChanged.unsubscribe();\n      _this._afterClosed$.next(_this.result);\n      _this._afterClosed$.complete();\n      _this.componentInstance = null;\n    });\n    this.overlayRef.keydownEvents().pipe(filter(function (event) {\n      return event.keyCode === ESCAPE && !_this.disableClose;\n    })).subscribe(function () {\n      return _this.close();\n    });\n    if (location) {\n      this.locationChanged = location.subscribe(function () {\n        if (_this.container.config.closeOnNavigation) {\n          _this.close();\n        }\n      });\n    }\n  }\n  OwlDialogRef.prototype.close = function (dialogResult) {\n    var _this = this;\n    this.result = dialogResult;\n    this.container.animationStateChanged.pipe(filter(function (event) {\n      return event.phaseName === 'start';\n    }), take(1)).subscribe(function () {\n      _this._beforeClose$.next(dialogResult);\n      _this._beforeClose$.complete();\n      _this.overlayRef.detachBackdrop();\n    });\n    this.container.startExitAnimation();\n  };\n  OwlDialogRef.prototype.backdropClick = function () {\n    return this.overlayRef.backdropClick();\n  };\n  OwlDialogRef.prototype.keydownEvents = function () {\n    return this.overlayRef.keydownEvents();\n  };\n  OwlDialogRef.prototype.updatePosition = function (position) {\n    var strategy = this.getPositionStrategy();\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n    this.overlayRef.updatePosition();\n    return this;\n  };\n  OwlDialogRef.prototype.updateSize = function (width, height) {\n    if (width === void 0) {\n      width = 'auto';\n    }\n    if (height === void 0) {\n      height = 'auto';\n    }\n    this.getPositionStrategy().width(width).height(height);\n    this.overlayRef.updatePosition();\n    return this;\n  };\n  OwlDialogRef.prototype.isAnimating = function () {\n    return this.container.isAnimating;\n  };\n  OwlDialogRef.prototype.afterOpen = function () {\n    return this._afterOpen$.asObservable();\n  };\n  OwlDialogRef.prototype.beforeClose = function () {\n    return this._beforeClose$.asObservable();\n  };\n  OwlDialogRef.prototype.afterClosed = function () {\n    return this._afterClosed$.asObservable();\n  };\n  OwlDialogRef.prototype.getPositionStrategy = function () {\n    return this.overlayRef.getConfig().positionStrategy;\n  };\n  return OwlDialogRef;\n}();\nexport { OwlDialogRef };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}