{"ast":null,"code":"import { __decorate, __metadata } from 'tslib';\nimport { Injectable, EventEmitter, Component, ChangeDetectionStrategy, ChangeDetectorRef, Input, Output, NgModule } from '@angular/core';\nimport { OnChange } from 'ngx-bootstrap/utils';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass AlertConfig {\n  constructor() {\n    /**\n     * default alert type\n     */\n    this.type = 'warning';\n    /**\n     * is alerts are dismissible by default\n     */\n    this.dismissible = false;\n    /**\n     * default time before alert will dismiss\n     */\n    this.dismissOnTimeout = undefined;\n  }\n}\nif (false) {\n  /**\n   * default alert type\n   * @type {?}\n   */\n  AlertConfig.prototype.type;\n  /**\n   * is alerts are dismissible by default\n   * @type {?}\n   */\n  AlertConfig.prototype.dismissible;\n  /**\n   * default time before alert will dismiss\n   * @type {?}\n   */\n  AlertConfig.prototype.dismissOnTimeout;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nlet AlertComponent = /*#__PURE__*/(() => {\n  class AlertComponent {\n    /**\n     * @param {?} _config\n     * @param {?} changeDetection\n     */\n    constructor(_config, changeDetection) {\n      this.changeDetection = changeDetection;\n      /**\n       * Alert type.\n       * Provides one of four bootstrap supported contextual classes:\n       * `success`, `info`, `warning` and `danger`\n       */\n      this.type = 'warning';\n      /**\n       * If set, displays an inline \"Close\" button\n       */\n      this.dismissible = false;\n      /**\n       * Is alert visible\n       */\n      this.isOpen = true;\n      /**\n       * This event fires immediately after close instance method is called,\n       * $event is an instance of Alert component.\n       */\n      this.onClose = new EventEmitter();\n      /**\n       * This event fires when alert closed, $event is an instance of Alert component\n       */\n      this.onClosed = new EventEmitter();\n      this.classes = '';\n      this.dismissibleChange = new EventEmitter();\n      Object.assign(this, _config);\n      this.dismissibleChange.subscribe(\n      /**\n      * @param {?} dismissible\n      * @return {?}\n      */\n      dismissible => {\n        this.classes = this.dismissible ? 'alert-dismissible' : '';\n        this.changeDetection.markForCheck();\n      });\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n      if (this.dismissOnTimeout) {\n        // if dismissOnTimeout used as attr without binding, it will be a string\n        setTimeout(\n        /**\n        * @return {?}\n        */\n        () => this.close(), parseInt( /** @type {?} */this.dismissOnTimeout, 10));\n      }\n    }\n    // todo: animation ` If the .fade and .in classes are present on the element,\n    // the alert will fade out before it is removed`\n    /**\n     * Closes an alert by removing it from the DOM.\n     * @return {?}\n     */\n    close() {\n      if (!this.isOpen) {\n        return;\n      }\n      this.onClose.emit(this);\n      this.isOpen = false;\n      this.changeDetection.markForCheck();\n      this.onClosed.emit(this);\n    }\n  }\n  __decorate([OnChange(), __metadata(\"design:type\", Object)], AlertComponent.prototype, \"dismissible\", void 0);\n  return AlertComponent;\n})();\n/** @nocollapse */\nif (false) {\n  /**\n   * Alert type.\n   * Provides one of four bootstrap supported contextual classes:\n   * `success`, `info`, `warning` and `danger`\n   * @type {?}\n   */\n  AlertComponent.prototype.type;\n  /**\n   * If set, displays an inline \"Close\" button\n   * @type {?}\n   */\n  AlertComponent.prototype.dismissible;\n  /**\n   * Number in milliseconds, after which alert will be closed\n   * @type {?}\n   */\n  AlertComponent.prototype.dismissOnTimeout;\n  /**\n   * Is alert visible\n   * @type {?}\n   */\n  AlertComponent.prototype.isOpen;\n  /**\n   * This event fires immediately after close instance method is called,\n   * $event is an instance of Alert component.\n   * @type {?}\n   */\n  AlertComponent.prototype.onClose;\n  /**\n   * This event fires when alert closed, $event is an instance of Alert component\n   * @type {?}\n   */\n  AlertComponent.prototype.onClosed;\n  /** @type {?} */\n  AlertComponent.prototype.classes;\n  /** @type {?} */\n  AlertComponent.prototype.dismissibleChange;\n  /**\n   * @type {?}\n   * @private\n   */\n  AlertComponent.prototype.changeDetection;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass AlertModule {\n  /**\n   * @return {?}\n   */\n  static forRoot() {\n    return {\n      ngModule: AlertModule,\n      providers: [AlertConfig]\n    };\n  }\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nexport { AlertComponent, AlertConfig, AlertModule };\n//# sourceMappingURL=ngx-bootstrap-alert.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}