{"ast":null,"code":"import { forwardRef, Directive, Input, HostBinding, HostListener, ElementRef, ChangeDetectorRef, Optional, Renderer2, ContentChildren, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO: config: activeClass - Class to apply to the checked buttons\n/** @type {?} */\nconst CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(\n  /**\n  * @return {?}\n  */\n  () => ButtonCheckboxDirective),\n  multi: true\n};\n/**\n * Add checkbox functionality to any element\n */\nclass ButtonCheckboxDirective {\n  constructor() {\n    /**\n     * Truthy value, will be set to ngModel\n     */\n    this.btnCheckboxTrue = true;\n    /**\n     * Falsy value, will be set to ngModel\n     */\n    this.btnCheckboxFalse = false;\n    this.state = false;\n    this.onChange = Function.prototype;\n    this.onTouched = Function.prototype;\n  }\n  // view -> model\n  /**\n   * @return {?}\n   */\n  onClick() {\n    if (this.isDisabled) {\n      return;\n    }\n    this.toggle(!this.state);\n    this.onChange(this.value);\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    this.toggle(this.trueValue === this.value);\n  }\n  /**\n   * @protected\n   * @return {?}\n   */\n  get trueValue() {\n    return typeof this.btnCheckboxTrue !== 'undefined' ? this.btnCheckboxTrue : true;\n  }\n  /**\n   * @protected\n   * @return {?}\n   */\n  get falseValue() {\n    return typeof this.btnCheckboxFalse !== 'undefined' ? this.btnCheckboxFalse : false;\n  }\n  /**\n   * @param {?} state\n   * @return {?}\n   */\n  toggle(state) {\n    this.state = state;\n    this.value = this.state ? this.trueValue : this.falseValue;\n  }\n  // ControlValueAccessor\n  // model -> view\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  writeValue(value) {\n    this.state = this.trueValue === value;\n    this.value = value ? this.trueValue : this.falseValue;\n  }\n  /**\n   * @param {?} isDisabled\n   * @return {?}\n   */\n  setDisabledState(isDisabled) {\n    this.isDisabled = isDisabled;\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n}\nif (false) {\n  /**\n   * Truthy value, will be set to ngModel\n   * @type {?}\n   */\n  ButtonCheckboxDirective.prototype.btnCheckboxTrue;\n  /**\n   * Falsy value, will be set to ngModel\n   * @type {?}\n   */\n  ButtonCheckboxDirective.prototype.btnCheckboxFalse;\n  /** @type {?} */\n  ButtonCheckboxDirective.prototype.state;\n  /**\n   * @type {?}\n   * @protected\n   */\n  ButtonCheckboxDirective.prototype.value;\n  /**\n   * @type {?}\n   * @protected\n   */\n  ButtonCheckboxDirective.prototype.isDisabled;\n  /**\n   * @type {?}\n   * @protected\n   */\n  ButtonCheckboxDirective.prototype.onChange;\n  /**\n   * @type {?}\n   * @protected\n   */\n  ButtonCheckboxDirective.prototype.onTouched;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst RADIO_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(\n  /**\n  * @return {?}\n  */\n  () => ButtonRadioDirective),\n  multi: true\n};\n/**\n * Create radio buttons or groups of buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\nclass ButtonRadioDirective {\n  /**\n   * @param {?} el\n   * @param {?} cdr\n   * @param {?} group\n   * @param {?} renderer\n   */\n  constructor(el, cdr, group, renderer) {\n    this.el = el;\n    this.cdr = cdr;\n    this.group = group;\n    this.renderer = renderer;\n    this.onChange = Function.prototype;\n    this.onTouched = Function.prototype;\n  }\n  /**\n   * Current value of radio component or group\n   * @return {?}\n   */\n  get value() {\n    return this.group ? this.group.value : this._value;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set value(value) {\n    if (this.group) {\n      this.group.value = value;\n      return;\n    }\n    this._value = value;\n  }\n  /**\n   * If `true` — radio button is disabled\n   * @return {?}\n   */\n  get disabled() {\n    return this._disabled;\n  }\n  /**\n   * @param {?} disabled\n   * @return {?}\n   */\n  set disabled(disabled) {\n    this._disabled = disabled;\n    this.setDisabledState(disabled);\n  }\n  /**\n   * @return {?}\n   */\n  get isActive() {\n    return this.btnRadio === this.value;\n  }\n  /**\n   * @return {?}\n   */\n  onClick() {\n    if (this.el.nativeElement.attributes.disabled || !this.uncheckable && this.btnRadio === this.value) {\n      return;\n    }\n    this.value = this.uncheckable && this.btnRadio === this.value ? undefined : this.btnRadio;\n    this._onChange(this.value);\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    this.uncheckable = typeof this.uncheckable !== 'undefined';\n  }\n  /**\n   * @return {?}\n   */\n  onBlur() {\n    this.onTouched();\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  _onChange(value) {\n    if (this.group) {\n      this.group.onTouched();\n      this.group.onChange(value);\n      return;\n    }\n    this.onTouched();\n    this.onChange(value);\n  }\n  // ControlValueAccessor\n  // model -> view\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  writeValue(value) {\n    this.value = value;\n    this.cdr.markForCheck();\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  /**\n   * @param {?} disabled\n   * @return {?}\n   */\n  setDisabledState(disabled) {\n    if (disabled) {\n      this.renderer.setAttribute(this.el.nativeElement, 'disabled', 'disabled');\n      return;\n    }\n    this.renderer.removeAttribute(this.el.nativeElement, 'disabled');\n  }\n}\n\n/** @nocollapse */\n\nif (false) {\n  /** @type {?} */\n  ButtonRadioDirective.prototype.onChange;\n  /** @type {?} */\n  ButtonRadioDirective.prototype.onTouched;\n  /**\n   * Radio button value, will be set to `ngModel`\n   * @type {?}\n   */\n  ButtonRadioDirective.prototype.btnRadio;\n  /**\n   * If `true` — radio button can be unchecked\n   * @type {?}\n   */\n  ButtonRadioDirective.prototype.uncheckable;\n  /**\n   * @type {?}\n   * @private\n   */\n  ButtonRadioDirective.prototype._value;\n  /**\n   * @type {?}\n   * @private\n   */\n  ButtonRadioDirective.prototype._disabled;\n  /**\n   * @type {?}\n   * @private\n   */\n  ButtonRadioDirective.prototype.el;\n  /**\n   * @type {?}\n   * @private\n   */\n  ButtonRadioDirective.prototype.cdr;\n  /**\n   * @type {?}\n   * @private\n   */\n  ButtonRadioDirective.prototype.group;\n  /**\n   * @type {?}\n   * @private\n   */\n  ButtonRadioDirective.prototype.renderer;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst RADIO_CONTROL_VALUE_ACCESSOR$1 = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(\n  /**\n  * @return {?}\n  */\n  () => ButtonRadioGroupDirective),\n  multi: true\n};\n/**\n * A group of radio buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\nclass ButtonRadioGroupDirective {\n  /**\n   * @param {?} cdr\n   */\n  constructor(cdr) {\n    this.cdr = cdr;\n    this.onChange = Function.prototype;\n    this.onTouched = Function.prototype;\n  }\n  /**\n   * @return {?}\n   */\n  get value() {\n    return this._value;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set value(value) {\n    this._value = value;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  writeValue(value) {\n    this._value = value;\n    this.cdr.markForCheck();\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  /**\n   * @param {?} disabled\n   * @return {?}\n   */\n  setDisabledState(disabled) {\n    if (this.radioButtons) {\n      this.radioButtons.forEach(\n      /**\n      * @param {?} buttons\n      * @return {?}\n      */\n      buttons => {\n        buttons.setDisabledState(disabled);\n      });\n    }\n  }\n}\n\n/** @nocollapse */\n\nif (false) {\n  /** @type {?} */\n  ButtonRadioGroupDirective.prototype.onChange;\n  /** @type {?} */\n  ButtonRadioGroupDirective.prototype.onTouched;\n  /** @type {?} */\n  ButtonRadioGroupDirective.prototype.radioButtons;\n  /**\n   * @type {?}\n   * @private\n   */\n  ButtonRadioGroupDirective.prototype._value;\n  /**\n   * @type {?}\n   * @private\n   */\n  ButtonRadioGroupDirective.prototype.cdr;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ButtonsModule {\n  /**\n   * @return {?}\n   */\n  static forRoot() {\n    return {\n      ngModule: ButtonsModule,\n      providers: []\n    };\n  }\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nexport { ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective, ButtonsModule, CHECKBOX_CONTROL_VALUE_ACCESSOR as ɵa, RADIO_CONTROL_VALUE_ACCESSOR$1 as ɵb, RADIO_CONTROL_VALUE_ACCESSOR as ɵc };\n//# sourceMappingURL=ngx-bootstrap-buttons.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}